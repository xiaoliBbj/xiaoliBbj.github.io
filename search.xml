<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>drawio指南</title>
    <url>/2023/08/17/drawio%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>下载网址：<a href="https://www.drawio.com/">https://www.drawio.com/</a></p>
<p>学习教程：<a href="https://www.bilibili.com/video/BV1Tu411U7v7/?from=search&seid=12303164196256071800&spm_id_from=333.337.0.0">https://www.bilibili.com/video/BV1Tu411U7v7/?from=search&amp;seid=12303164196256071800&amp;spm_id_from=333.337.0.0</a></p>
<h1 id="一些不成文的规定"><a href="#一些不成文的规定" class="headerlink" title="一些不成文的规定"></a>一些不成文的规定</h1><blockquote>
<p>圆角矩形：代表流程的开始&#x2F;结束</p>
<p>菱形：决策&#x2F;判断</p>
<p>平行四边形：资料的输入和输出</p>
<p>带有波浪的长方形：列印出来的文件</p>
<p>外框为虚线的矩形：针对流程图的某些步骤进行注解和说明</p>
</blockquote>
<h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><blockquote>
<p>ctrl+G：使图形变成容器，可以往里面放置其他图案</p>
<p>ctrl+按蓝色箭头即可实现图形的复制</p>
<p><img src="D:\blog\source_posts\drawio使用.assets\image-20230817205508970.png" alt="image-20230817205508970"></p>
<p>shift+按蓝色箭头即可实现两个图形之间连线</p>
<p>ctrl+shift进行复制</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>GitHub使用教程</title>
    <url>/2023/10/02/Github%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="访问gitHub"><a href="#访问gitHub" class="headerlink" title="访问gitHub"></a>访问gitHub</h1><p>参考文档：</p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzI1NDczNTAwMA==&mid=2247493961&idx=1&sn=16386132c1942f9f06d1adef61e4ca9f&scene=21#wechat_redirect">GitHub 访问不了？砸墙狂魔教你几招【文末抽奖】</a></p>
<p><a href="https://blog.csdn.net/LZJLZJLZJLZJLZJLZJ/article/details/132124711?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-4-132124711-blog-127236651.235%5Ev38%5Epc_relevant_default_base3&spm=1001.2101.3001.4242.3&utm_relevant_index=7">一步步教你解决github无法打开问题_github打不开_乐观男孩的博客-CSDN博客</a></p>
<p><a href="https://github.com/521xueweihan/GitHub520">GitHub - 521xueweihan&#x2F;GitHub520: :kissing_heart: 让你“爱”上 GitHub，解决访问时图裂、加载慢的问题。（无需安装）</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/629079933">加速你的 GitHub 访问速度，使用 SwitchHosts 工具，畅享极速代码浏览体验！（全网最详细踩坑教程）</a></p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>用户访问网址，发送请求时，DNS会根据请求返回目标地址的IP地址，之后利用得到的IP地址向GitHub的服务器发送请求，GitHub返回网址，从而用户访问网址成功。如果想要绕开DNS，访问目标地址，可以修改本地的hosts文件。</p>
<p>直接访问github网址很有可能出现以下情况，出现此情况的原因有很多，如：请求超时。</p>
<p><img src="D:\blog\source_posts\Github使用教程.assets\image-20231003011743425.png" alt="image-20231003011743425"></p>
<h2 id="获取IP地址"><a href="#获取IP地址" class="headerlink" title="获取IP地址"></a>获取IP地址</h2><p>想要绕过DNS访问GitHub，可以先查询GitHub的IP地址。获取IP地址有两种方式：</p>
<blockquote>
<p>1、上网搜索，例如：<a href="https://ip.tool.chinaz.com/github.com">IP&#x2F;服务器github.com的信息 - 站长工具 (chinaz.com)</a></p>
<p><img src="D:\blog\source_posts\Github使用教程.assets\image-20231003012347181.png" alt="image-20231003012347181"></p>
<p>可以从图片看出IP地址为20.205.243.166</p>
<p>2、在cmd中通过ping域名来获取IP地址</p>
<p><img src="D:\blog\source_posts\Github使用教程.assets\image-20231003011508992.png" alt="image-20231003011508992"></p>
<p>由图片可以看出IP地址为20.205.243.166</p>
</blockquote>
<h2 id="修改hosts文件"><a href="#修改hosts文件" class="headerlink" title="修改hosts文件"></a>修改hosts文件</h2><h3 id="hosts文件路径"><a href="#hosts文件路径" class="headerlink" title="hosts文件路径"></a>hosts文件路径</h3><ul>
<li>Windows 系统：<code>C:\Windows\System32\drivers\etc\hosts</code></li>
<li>Linux 系统：<code>/etc/hosts</code></li>
<li>Mac（苹果电脑）系统：<code>/etc/hosts</code></li>
<li>Android（安卓）系统：<code>/system/etc/hosts</code></li>
<li>iPhone（iOS）系统：<code>/etc/hosts</code></li>
</ul>
<h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p>前面的数字时前面查到的IP地址</p>
<p><img src="D:\blog\source_posts\Github使用教程.assets\image-20231003012717890.png" alt="image-20231003012717890"></p>
<h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ipconfig /flushdns</span><br></pre></td></tr></table></figure>

<p><img src="D:\blog\source_posts\Github使用教程.assets\image-20231003012821520.png" alt="image-20231003012821520"></p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="页面布局混乱"><a href="#页面布局混乱" class="headerlink" title="页面布局混乱"></a>页面布局混乱</h3><p>如果遇到只有文字，但是页面布局混乱，不够清晰，很有可能是网页对应的css文件对应的域名和网站本身对应的域名不相同，说明时上述同样的问题——访问超时，此时需要将其对应的网址按照上述方法挨个重置一下信息应该可以解决。</p>
<h3 id="访问依旧缓慢"><a href="#访问依旧缓慢" class="headerlink" title="访问依旧缓慢"></a>访问依旧缓慢</h3><p>GitHub有不同地方的服务器，从在线工具（<a href="https://site.ip138.com/github.ip/%EF%BC%89%E5%8D%B3%E5%8F%AF%E6%9F%A5%E5%88%B0%E5%8E%86%E5%8F%B2%E8%A7%A3%E6%9E%90%E8%AE%B0%E5%BD%95%EF%BC%8C%E5%9C%A8cmd%E4%B8%AD%E6%8C%A8%E4%B8%AAping%E4%B8%80%E4%B8%8B%E4%B8%8D%E5%90%8C%E7%9A%84%E5%9C%B0%E5%9D%80%EF%BC%8C%E6%9F%A5%E7%9C%8B%E8%80%97%E6%97%B6%E5%A6%82%E4%BD%95%EF%BC%8C%E9%80%89%E6%8B%A9%E6%9C%80%E5%BF%AB%E7%9A%84IP%E5%9C%B0%E5%9D%80%E8%BF%9B%E8%A1%8C%E8%AE%BF%E9%97%AE%E5%8D%B3%E5%8F%AF%E3%80%82">https://site.ip138.com/github.ip/）即可查到历史解析记录，在cmd中挨个ping一下不同的地址，查看耗时如何，选择最快的IP地址进行访问即可。</a></p>
<p><img src="D:\blog\source_posts\Github使用教程.assets\image-20231003013746590.png" alt="image-20231003013746590"></p>
<p><img src="D:\blog\source_posts\Github使用教程.assets\image-20231003014012466.png" alt="image-20231003014012466"></p>
<p>明显可以看出这个新地址时间远比上一个地址的耗时更长。</p>
<h2 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h2><p>1、略微麻烦</p>
<p>2、需要查看多个IP地址，并且地址需要在国内</p>
<h1 id="Github520"><a href="#Github520" class="headerlink" title="Github520"></a>Github520</h1><p>项目GitHub网址：<a href="https://github.com/521xueweihan/GitHub520">GitHub - 521xueweihan&#x2F;GitHub520: :kissing_heart: 让你“爱”上 GitHub，解决访问时图裂、加载慢的问题。（无需安装）</a></p>
<p>先安装switchhosts软件，从软件商城安装即可：</p>
<p><img src="D:\blog\source_posts\Github使用教程.assets\image-20231004162447358.png" alt="image-20231004162447358"></p>
<p>配置方法：</p>
<blockquote>
<p>以 SwitchHosts 为例，看一下怎么使用的，配置参考下面：</p>
<ul>
<li>Title: 随意</li>
<li>Type: <code>Remote</code></li>
<li>URL: <code>https://raw.hellogithub.com/hosts</code></li>
<li>Auto Refresh: 最好选 <code>1 hour</code></li>
</ul>
</blockquote>
<p><img src="D:\blog\source_posts\Github使用教程.assets\image-20231004163052538.png" alt="image-20231004163052538"></p>
<h1 id="steam插件"><a href="#steam插件" class="headerlink" title="steam插件"></a>steam插件</h1><p><img src="D:\blog\source_posts\Github使用教程.assets\image-20231003015613245.png" alt="image-20231003015613245"></p>
<p>玩游戏的朋友可能知道这个插件，安装这个插件后玩steam可以顺滑一些，除了玩游戏加快这个功能，它还能够加速访问GitHub网站。</p>
<p>关于这个软件安装，查看羽翼城大佬博客，按教程安装即可。链接：<a href="https://www.dogfight360.com/blog/">https://www.dogfight360.com/blog/</a></p>
<h1 id="外网服务器"><a href="#外网服务器" class="headerlink" title="外网服务器"></a>外网服务器</h1><p>很多翻墙的朋友会有这个软件，开启代理以后就能够科学上网，当然前提是你买了流量套餐。</p>
<p><img src="D:\blog\source_posts\Github使用教程.assets\image-20231003015800547.png" alt="image-20231003015800547"></p>
<p>相关软件在买完套餐之后根据其提供的配置文档进行安装。购买便宜套餐链接：<a href="https://搞快点.com/">https://xn--66t76gw3n.com/</a></p>
<h1 id="gitclone"><a href="#gitclone" class="headerlink" title="gitclone"></a>gitclone</h1><p>网址：<a href="https://www.gitclone.com/">https://www.gitclone.com/</a></p>
<p>无法上传代码，但是可以快速下载代码学习</p>
<h1 id="gitee导入"><a href="#gitee导入" class="headerlink" title="gitee导入"></a>gitee导入</h1><p><img src="D:\blog\source_posts\Github使用教程.assets\image-20231004163806273.png" alt="image-20231004163806273"></p>
]]></content>
  </entry>
  <entry>
    <title>go语言指南</title>
    <url>/2023/07/25/go%E8%AF%AD%E8%A8%80%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h1 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h1><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p>网址：<a href="https://go.dev/">https://go.dev/</a></p>
<p>直接根据需要下载即可</p>
<p>代码网址：<a href="https://wangkechun-gobyexample-46xfxd9o5oh.ws-us102.gitpod.io/">https://wangkechun-gobyexample-46xfxd9o5oh.ws-us102.gitpod.io/</a></p>
<h2 id="配置集成开发环境"><a href="#配置集成开发环境" class="headerlink" title="配置集成开发环境"></a>配置集成开发环境</h2><p>vscode 下载go插件</p>
<p>goland 付费软件</p>
<h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main <span class="comment">//表示程序的入口包、入口文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span> <span class="comment">//输入输出字符串</span></span><br><span class="line">)<span class="comment">//导入格式包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="comment">//import &quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">&#125; <span class="comment">//main函数</span></span><br></pre></td></tr></table></figure>

<h2 id="编译运行"><a href="#编译运行" class="headerlink" title="编译运行"></a>编译运行</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go build +文件路径 //编译</span><br><span class="line">go run +文件路径（举例：/workspace/go-by-example/example/01-hello） //运行</span><br></pre></td></tr></table></figure>

<h2 id="变量申明"><a href="#变量申明" class="headerlink" title="变量申明"></a>变量申明</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;initial&quot;</span> </span><br><span class="line"><span class="comment">//格式：var name= value ，这会自动推导格式类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b, c <span class="type">int</span> = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line"><span class="comment">//也可以显式说明变量类型</span></span><br></pre></td></tr></table></figure>

<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">f := <span class="type">float32</span>(e)</span><br><span class="line"><span class="comment">//格式： 变量名 := 值</span></span><br></pre></td></tr></table></figure>

<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//go会自动确定常量的类型</span></span><br><span class="line"><span class="keyword">const</span> s <span class="type">string</span> = <span class="string">&quot;constant&quot;</span></span><br><span class="line"><span class="keyword">const</span> h = <span class="number">500000000</span></span><br><span class="line"><span class="keyword">const</span> i = <span class="number">3e20</span> / h</span><br><span class="line"><span class="comment">//格式： const 常量名 =值</span></span><br></pre></td></tr></table></figure>

<h2 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//if后面没有括号</span></span><br><span class="line"><span class="keyword">if</span> <span class="number">7</span>%<span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;7 is even&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;7 is odd&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> num := <span class="number">9</span>; num &lt; <span class="number">0</span> &#123;</span><br><span class="line">		fmt.Println(num, <span class="string">&quot;is negative&quot;</span>)</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> num &lt; <span class="number">10</span> &#123;</span><br><span class="line">		fmt.Println(num, <span class="string">&quot;has 1 digit&quot;</span>)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		fmt.Println(num, <span class="string">&quot;has multiple digits&quot;</span>)</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//只有for循环</span></span><br><span class="line"><span class="comment">//for后面没有括号</span></span><br><span class="line"><span class="comment">//有break（退出）和continue（继续）</span></span><br><span class="line"><span class="keyword">for</span> j := <span class="number">7</span>; j &lt; <span class="number">9</span>; j++ &#123;</span><br><span class="line">    fmt.Println(j)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不需要再每一个case后面加上break</span></span><br><span class="line"><span class="comment">//可以使用不同的类型，甚至是结构体</span></span><br><span class="line"><span class="keyword">switch</span> a &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;one&quot;</span>)</span><br><span class="line">	<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;two&quot;</span>)</span><br><span class="line">	<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;three&quot;</span>)</span><br><span class="line">	<span class="keyword">case</span> <span class="number">4</span>, <span class="number">5</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;four or five&quot;</span>)</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;other&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">//也可以代替if-else</span></span><br><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line">	<span class="keyword">case</span> t.Hour() &lt; <span class="number">12</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;It&#x27;s before noon&quot;</span>)</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;It&#x27;s after noon&quot;</span>)</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//长度固定</span></span><br><span class="line"><span class="comment">//一维整型数组</span></span><br><span class="line"><span class="keyword">var</span> a [<span class="number">5</span>]<span class="type">int</span></span><br><span class="line">a[<span class="number">4</span>] = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义时确定数组内容</span></span><br><span class="line">b := [<span class="number">5</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">good := []<span class="type">string</span>&#123;<span class="string">&quot;g&quot;</span>, <span class="string">&quot;o&quot;</span>, <span class="string">&quot;o&quot;</span>, <span class="string">&quot;d&quot;</span>&#125;</span><br><span class="line">fmt.Println(b)</span><br><span class="line"></span><br><span class="line"><span class="comment">//二维数组</span></span><br><span class="line"><span class="keyword">var</span> twoD [<span class="number">2</span>][<span class="number">3</span>]<span class="type">int</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">2</span>; i++ &#123;</span><br><span class="line">    <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">3</span>; j++ &#123;</span><br><span class="line">        twoD[i][j] = i + j</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//可变长度数组</span></span><br><span class="line"><span class="comment">//make创建切片</span></span><br><span class="line">s := <span class="built_in">make</span>([]<span class="type">string</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//append添加元素，必须要赋值回去</span></span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="string">&quot;d&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//copy复制</span></span><br><span class="line"><span class="built_in">copy</span>(c, s)</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取元素</span></span><br><span class="line">fmt.Println(s[<span class="number">2</span>:<span class="number">5</span>]) <span class="comment">// [c d e]</span></span><br><span class="line">fmt.Println(s[:<span class="number">5</span>])  <span class="comment">// [a b c d e]</span></span><br><span class="line">fmt.Println(s[<span class="number">2</span>:])  <span class="comment">// [c d e f]</span></span><br></pre></td></tr></table></figure>

<h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//make创建空map，make（map[key的类型]value的类型）</span></span><br><span class="line">m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建已知内容切片</span></span><br><span class="line">m2 := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;<span class="string">&quot;one&quot;</span>: <span class="number">1</span>, <span class="string">&quot;two&quot;</span>: <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//写入</span></span><br><span class="line">m[<span class="string">&quot;two&quot;</span>] = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//读取</span></span><br><span class="line">fmt.Println(m[<span class="string">&quot;one&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="built_in">delete</span>(m, <span class="string">&quot;one&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取时，ok判断是否有key存在</span></span><br><span class="line">r, ok := m[<span class="string">&quot;unknow&quot;</span>]</span><br><span class="line">fmt.Println(r, ok) <span class="comment">// 0 false</span></span><br></pre></td></tr></table></figure>

<h2 id="range"><a href="#range" class="headerlink" title="range"></a>range</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//遍历数组时：索引 值</span></span><br><span class="line"><span class="keyword">for</span> i, num := <span class="keyword">range</span> nums &#123;</span><br><span class="line">    sum += num</span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">2</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;index:&quot;</span>, i, <span class="string">&quot;num:&quot;</span>, num) <span class="comment">// index: 0 num: 2</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历map时：key value</span></span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> m &#123;</span><br><span class="line">    fmt.Println(k, v) <span class="comment">// b 8; a A</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> k := <span class="keyword">range</span> m &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;key&quot;</span>, k) <span class="comment">// key a; key b</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//两种方式</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a <span class="type">int</span>, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add2</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一个返回值，第二个返回信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">exists</span><span class="params">(m <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>, k <span class="type">string</span>)</span></span> (v <span class="type">string</span>, ok <span class="type">bool</span>) &#123;</span><br><span class="line">	v, ok = m[k]</span><br><span class="line">	<span class="keyword">return</span> v, ok</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对传入参数修改</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add2</span><span class="params">(n <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	n += <span class="number">2</span></span><br><span class="line">&#125;<span class="comment">//传入的参数是拷贝</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add2ptr</span><span class="params">(n *<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	*n += <span class="number">2</span><span class="comment">//运算时加*</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	n := <span class="number">5</span></span><br><span class="line">	add2(n)</span><br><span class="line">	fmt.Println(n) <span class="comment">// 5</span></span><br><span class="line">	add2ptr(&amp;n)<span class="comment">//需要调用&amp;</span></span><br><span class="line">	fmt.Println(n) <span class="comment">// 7</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义</span></span><br><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span> &#123;</span><br><span class="line">	name     <span class="type">string</span></span><br><span class="line">	password <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化时需要传入初始值，默认是空值</span></span><br><span class="line">a := user&#123;name: <span class="string">&quot;wang&quot;</span>, password: <span class="string">&quot;1024&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义</span></span><br><span class="line"><span class="keyword">var</span> d user</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用参数</span></span><br><span class="line">d.name = <span class="string">&quot;wang&quot;</span></span><br><span class="line">d.password = <span class="string">&quot;1024&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkPassword</span><span class="params">(u user, password <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> u.password == password</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用指针可以减少大结构体拷贝时的开销</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkPassword2</span><span class="params">(u *user, password <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> u.password == password</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="结构体方法"><a href="#结构体方法" class="headerlink" title="结构体方法"></a>结构体方法</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u user)</span></span> checkPassword(password <span class="type">string</span>) <span class="type">bool</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> u.password == password</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//带指针</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *user)</span></span> resetPassword(password <span class="type">string</span>) &#123;</span><br><span class="line">	u.password = password</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a := user&#123;name: <span class="string">&quot;wang&quot;</span>, password: <span class="string">&quot;1024&quot;</span>&#125;</span><br><span class="line">	a.resetPassword(<span class="string">&quot;2048&quot;</span>)</span><br><span class="line">	fmt.Println(a.checkPassword(<span class="string">&quot;2048&quot;</span>)) <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findUser</span><span class="params">(users []user, name <span class="type">string</span>)</span></span> (v *user, err <span class="type">error</span>) &#123;</span><br><span class="line">	<span class="keyword">for</span> _, u := <span class="keyword">range</span> users &#123;</span><br><span class="line">		<span class="keyword">if</span> u.name == name &#123;</span><br><span class="line">			<span class="keyword">return</span> &amp;u, <span class="literal">nil</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">&quot;not found&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">u, err := findUser([]user&#123;&#123;<span class="string">&quot;wang&quot;</span>, <span class="string">&quot;1024&quot;</span>&#125;&#125;, <span class="string">&quot;wang&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(u.name) <span class="comment">// wang</span></span><br></pre></td></tr></table></figure>

<h2 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">a := <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="comment">//包含操作</span></span><br><span class="line">fmt.Println(strings.Contains(a, <span class="string">&quot;ll&quot;</span>))                <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串计数</span></span><br><span class="line">fmt.Println(strings.Count(a, <span class="string">&quot;l&quot;</span>))                    <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">fmt.Println(strings.HasPrefix(a, <span class="string">&quot;he&quot;</span>))               <span class="comment">// true</span></span><br><span class="line">fmt.Println(strings.HasSuffix(a, <span class="string">&quot;llo&quot;</span>))              <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//查找字符串位置</span></span><br><span class="line">fmt.Println(strings.Index(a, <span class="string">&quot;ll&quot;</span>))                   <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//来连接字符串</span></span><br><span class="line">fmt.Println(strings.Join([]<span class="type">string</span>&#123;<span class="string">&quot;he&quot;</span>, <span class="string">&quot;llo&quot;</span>&#125;, <span class="string">&quot;-&quot;</span>)) <span class="comment">// he-llo</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//重复字符串</span></span><br><span class="line">fmt.Println(strings.Repeat(a, <span class="number">2</span>))                     <span class="comment">// hellohello</span></span><br><span class="line">fmt.Println(strings.Replace(a, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;E&quot;</span>, <span class="number">-1</span>))         <span class="comment">// hEllo</span></span><br><span class="line">fmt.Println(strings.Split(<span class="string">&quot;a-b-c&quot;</span>, <span class="string">&quot;-&quot;</span>))              <span class="comment">// [a b c]</span></span><br><span class="line">fmt.Println(strings.ToLower(a))                       <span class="comment">// hello</span></span><br><span class="line">fmt.Println(strings.ToUpper(a))                       <span class="comment">// HELLO</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(a))                                   <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>

<h2 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//打印多个变量，并且换行</span></span><br><span class="line">fmt.Println(s, n)</span><br><span class="line"></span><br><span class="line"><span class="comment">//%v表示任意类型变量，%+v，%#v输出信息越来越详细</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;s=%v\n&quot;</span>, s)  <span class="comment">// s=hello</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;p=%v\n&quot;</span>, p)  <span class="comment">// p=&#123;1 2&#125;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;p=%+v\n&quot;</span>, p) <span class="comment">// p=&#123;x:1 y:2&#125;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;p=%#v\n&quot;</span>, p) <span class="comment">// p=main.point&#123;x:1, y:2&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="json"><a href="#json" class="headerlink" title="json"></a>json</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//结构体每个属性字段的第一个字母时大写</span></span><br><span class="line"><span class="keyword">type</span> userInfo <span class="keyword">struct</span> &#123;</span><br><span class="line">	Name  <span class="type">string</span></span><br><span class="line">	Age   <span class="type">int</span> <span class="string">`json:&quot;age&quot;`</span><span class="comment">//字段名变小写</span></span><br><span class="line">	Hobby []<span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以使用json.Marshal进行序列化</span></span><br><span class="line">a := userInfo&#123;Name: <span class="string">&quot;wang&quot;</span>, Age: <span class="number">18</span>, Hobby: []<span class="type">string</span>&#123;<span class="string">&quot;Golang&quot;</span>, <span class="string">&quot;TypeScript&quot;</span>&#125;&#125;</span><br><span class="line">	buf, err := json.Marshal(a)</span><br><span class="line"></span><br><span class="line"><span class="comment">//反序列化</span></span><br><span class="line">err = json.Unmarshal(buf, &amp;b)</span><br></pre></td></tr></table></figure>

<h2 id="time"><a href="#time" class="headerlink" title="time"></a>time</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//当前时间</span></span><br><span class="line">now := time.Now()</span><br><span class="line"></span><br><span class="line"><span class="comment">//其他时间</span></span><br><span class="line">t := time.Date(<span class="number">2022</span>, <span class="number">3</span>, <span class="number">27</span>, <span class="number">1</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">0</span>, time.UTC)</span><br><span class="line"></span><br><span class="line"><span class="comment">//时间减法</span></span><br><span class="line">diff := t2.Sub(t)</span><br><span class="line"></span><br><span class="line"><span class="comment">//格式为时间字符串</span></span><br><span class="line">fmt.Println(t.Format(<span class="string">&quot;2006-01-02 15:04:05&quot;</span>))  </span><br><span class="line"></span><br><span class="line"><span class="comment">//获取时间详细信息</span></span><br><span class="line">fmt.Println(t.Year(), t.Month(), t.Day(), t.Hour(), t.Minute())</span><br><span class="line"></span><br><span class="line"><span class="comment">//解析时间</span></span><br><span class="line">t3, err := time.Parse(<span class="string">&quot;2006-01-02 15:04:05&quot;</span>, <span class="string">&quot;2022-03-27 01:25:36&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//时间戳</span></span><br><span class="line">fmt.Println(now.Unix()) <span class="comment">// 1648738080</span></span><br></pre></td></tr></table></figure>

<h2 id="数字解析"><a href="#数字解析" class="headerlink" title="数字解析"></a>数字解析</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//导入包</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//解析字符串</span></span><br><span class="line">f, _ := strconv.ParseFloat(<span class="string">&quot;1.234&quot;</span>, <span class="number">64</span>)</span><br><span class="line">fmt.Println(f) <span class="comment">// 1.234</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//参数依次是数值，进制，返回数值</span></span><br><span class="line">n, _ := strconv.ParseInt(<span class="string">&quot;111&quot;</span>, <span class="number">10</span>, <span class="number">64</span>)</span><br><span class="line">fmt.Println(n) <span class="comment">// 111</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//十进制字符串转化为数字</span></span><br><span class="line">n2, _ := strconv.Atoi(<span class="string">&quot;123&quot;</span>)</span><br><span class="line">fmt.Println(n2) <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line">n2, err := strconv.Atoi(<span class="string">&quot;AAA&quot;</span>)</span><br><span class="line">fmt.Println(n2, err) <span class="comment">// 0 strconv.Atoi: parsing &quot;AAA&quot;: invalid syntax</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="进程信息"><a href="#进程信息" class="headerlink" title="进程信息"></a>进程信息</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取命令行参数</span></span><br><span class="line"><span class="comment">// go run example/20-env/main.go a b c d</span></span><br><span class="line">fmt.Println(os.Args)           <span class="comment">// [/var/folders/8p/n34xxfnx38dg8bv_x8l62t_m0000gn/T/go-build3406981276/b001/exe/main（临时目录） a b c d]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取环境变量</span></span><br><span class="line">fmt.Println(os.Getenv(<span class="string">&quot;PATH&quot;</span>)) <span class="comment">// /usr/local/go/bin...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//写入环境变量</span></span><br><span class="line">fmt.Println(os.Setenv(<span class="string">&quot;AA&quot;</span>, <span class="string">&quot;BB&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//快速启动子进程</span></span><br><span class="line">buf, err := exec.Command(<span class="string">&quot;grep&quot;</span>, <span class="string">&quot;127.0.0.1&quot;</span>, <span class="string">&quot;/etc/hosts&quot;</span>).CombinedOutput()</span><br></pre></td></tr></table></figure>

<h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><h2 id="猜谜游戏"><a href="#猜谜游戏" class="headerlink" title="猜谜游戏"></a>猜谜游戏</h2><h3 id="v1"><a href="#v1" class="headerlink" title="v1"></a>v1</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;math/rand&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	maxNum := <span class="number">100</span></span><br><span class="line">	secretNumber := rand.Intn(maxNum) <span class="comment">//rand是代码包，Intn随机选取一个整数</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;The secret number is &quot;</span>, secretNumber)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这部分和老师说的不太一样，老师说这部分代码应该输出的结果是相同的，但是我每次运行的结果都不相同，如下：<img src="D:\blog\source_posts\go语言指南.assets\image-20230810103132169.png" alt="image-20230810103132169"></p>
</blockquote>
<h3 id="v2"><a href="#v2" class="headerlink" title="v2"></a>v2</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;math/rand&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	maxNum := <span class="number">100</span></span><br><span class="line">	rand.Seed(time.Now().UnixNano())<span class="comment">//使用时间戳来初始化随机数种子</span></span><br><span class="line">	secretNumber := rand.Intn(maxNum)</span><br><span class="line">	fmt.Println(<span class="string">&quot;The secret number is &quot;</span>, secretNumber)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这部分代码运行出来也是不一样的数</p>
<p><img src="D:\blog\source_posts\go语言指南.assets\image-20230810103338275.png" alt="image-20230810103338275"></p>
</blockquote>
<h3 id="v3"><a href="#v3" class="headerlink" title="v3"></a>v3</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;bufio&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;math/rand&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">	<span class="string">&quot;strconv&quot;</span></span><br><span class="line">	<span class="string">&quot;strings&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	maxNum := <span class="number">100</span></span><br><span class="line">	rand.Seed(time.Now().UnixNano())</span><br><span class="line">	secretNumber := rand.Intn(maxNum)</span><br><span class="line">	fmt.Println(<span class="string">&quot;The secret number is &quot;</span>, secretNumber)</span><br><span class="line"></span><br><span class="line">	fmt.Println(<span class="string">&quot;Please input your guess&quot;</span>)<span class="comment">//读取用户输入</span></span><br><span class="line">	reader := bufio.NewReader(os.Stdin)<span class="comment">// 创建一个读取器来读取用户输入</span></span><br><span class="line">	input, err := reader.ReadString(<span class="string">&#x27;\n&#x27;</span>)<span class="comment">// 读取用户输入的字符串，直到遇到换行符</span></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;An error occured while reading input. Please try again&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	input = strings.Trim(input, <span class="string">&quot;\r\n&quot;</span>)<span class="comment">// 去除输入中的换行符和回车符</span></span><br><span class="line"></span><br><span class="line">	guess, err := strconv.Atoi(input)<span class="comment">// 将用户输入的字符串转换成整数类型</span></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;Invalid input. Please enter an integer value&quot;</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;You guess is&quot;</span>, guess)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果如下：</p>
<p><img src="D:\blog\source_posts\go语言指南.assets\image-20230810105254592.png" alt="image-20230810105254592"></p>
<p>中途遇到无法在终端里面输入，可查看下面连接解决：<a href="https://cloud.tencent.com/developer/article/2196813">【6】VScode 无法在终端输入问题，提示：无法在只读编辑器中编辑-腾讯云开发者社区-腾讯云 (tencent.com)</a></p>
</blockquote>
<h4 id="nil"><a href="#nil" class="headerlink" title="nil"></a>nil</h4><blockquote>
<p>在 Go 编程语言中，<code>nil</code> 是一个预定义的标识符，表示一个空值或者零值。它通常用于表示指针、接口、映射、切片、通道和函数类型的零值。在不同的上下文中，<code>nil</code> 表示不同的含义，但总的来说，它代表了一个值的缺失或者不存在。</p>
<p>以下是一些常见情况下 <code>nil</code> 的使用：</p>
<ol>
<li><strong>指针类型</strong>：在 Go 中，一个指针变量指向某个值的内存地址。当一个指针没有被初始化时，它的值为 <code>nil</code>，表示它不指向任何有效的内存地址。</li>
<li><strong>接口类型</strong>：一个接口变量在没有被赋值时，其值为 <code>nil</code>，表示它不持有任何值。</li>
<li><strong>切片、映射和通道</strong>：在没有被初始化时，切片、映射和通道的零值都是 <code>nil</code>。</li>
<li><strong>函数类型</strong>：函数变量在没有被赋值时，其值为 <code>nil</code>，表示它不引用任何函数。</li>
</ol>
<p>总之，<code>nil</code> 在 Go 中代表了值的缺失或者不存在，它在不同类型的变量中具有不同的含义，但都表示了一个空值状态。</p>
</blockquote>
<h3 id="v4"><a href="#v4" class="headerlink" title="v4"></a>v4</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;bufio&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;math/rand&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">	<span class="string">&quot;strconv&quot;</span></span><br><span class="line">	<span class="string">&quot;strings&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	maxNum := <span class="number">100</span></span><br><span class="line">	rand.Seed(time.Now().UnixNano())</span><br><span class="line">	secretNumber := rand.Intn(maxNum)</span><br><span class="line">	fmt.Println(<span class="string">&quot;The secret number is &quot;</span>, secretNumber)</span><br><span class="line"></span><br><span class="line">	fmt.Println(<span class="string">&quot;Please input your guess&quot;</span>)</span><br><span class="line">	reader := bufio.NewReader(os.Stdin)</span><br><span class="line">	input, err := reader.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;An error occured while reading input. Please try again&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	input = strings.Trim(input, <span class="string">&quot;\r\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">	guess, err := strconv.Atoi(input)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;Invalid input. Please enter an integer value&quot;</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;You guess is&quot;</span>, guess)</span><br><span class="line">    <span class="comment">//判断猜测的数字大小</span></span><br><span class="line">	<span class="keyword">if</span> guess &gt; secretNumber &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;Your guess is bigger than the secret number. Please try again&quot;</span>)</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> guess &lt; secretNumber &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;Your guess is smaller than the secret number. Please try again&quot;</span>)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;Correct, you Legend!&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行的结果：</p>
<p><img src="D:\blog\source_posts\go语言指南.assets\image-20230810105640754.png" alt="image-20230810105640754"></p>
</blockquote>
<h3 id="v5"><a href="#v5" class="headerlink" title="v5"></a>v5</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;bufio&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;math/rand&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">	<span class="string">&quot;strconv&quot;</span></span><br><span class="line">	<span class="string">&quot;strings&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	maxNum := <span class="number">100</span></span><br><span class="line">	rand.Seed(time.Now().UnixNano())</span><br><span class="line">	secretNumber := rand.Intn(maxNum)</span><br><span class="line">	<span class="comment">// fmt.Println(&quot;The secret number is &quot;, secretNumber)</span></span><br><span class="line"></span><br><span class="line">	fmt.Println(<span class="string">&quot;Please input your guess&quot;</span>)</span><br><span class="line">	reader := bufio.NewReader(os.Stdin)</span><br><span class="line">    <span class="comment">//增加游戏循环</span></span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		input, err := reader.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;An error occured while reading input. Please try again&quot;</span>, err)</span><br><span class="line">            <span class="comment">//如果输入错误，则重新输入</span></span><br><span class="line">			<span class="keyword">continue</span></span><br><span class="line">		&#125;</span><br><span class="line">		input = strings.Trim(input, <span class="string">&quot;\r\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">		guess, err := strconv.Atoi(input)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;Invalid input. Please enter an integer value&quot;</span>)</span><br><span class="line">			<span class="keyword">continue</span></span><br><span class="line">		&#125;</span><br><span class="line">		fmt.Println(<span class="string">&quot;You guess is&quot;</span>, guess)</span><br><span class="line">		<span class="keyword">if</span> guess &gt; secretNumber &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;Your guess is bigger than the secret number. Please try again&quot;</span>)</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> guess &lt; secretNumber &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;Your guess is smaller than the secret number. Please try again&quot;</span>)</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;Correct, you Legend!&quot;</span>)</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果：<img src="D:\blog\source_posts\go语言指南.assets\image-20230810110227372.png" alt="image-20230810110227372"></p>
</blockquote>
<h2 id="在线词典介绍"><a href="#在线词典介绍" class="headerlink" title="在线词典介绍"></a>在线词典介绍</h2><p>找到彩云翻译的网站：<a href="https://fanyi.caiyunapp.com/#/">https://fanyi.caiyunapp.com/#/</a></p>
<p>右键“检查”，点击“Network”，在右边栏找到dict，查看它的method是不是POST，是的话，找到它的Payload</p>
<p><img src="D:\blog\source_posts\go语言指南.assets\image-20230810225441590.png" alt="image-20230810225441590"></p>
<blockquote>
<p>Payload写的是：</p>
<p>{trans_type: “en2zh”, source: “good”}</p>
<p>​		source: “good”</p>
<ol>
<li>trans_type: “en2zh”&#x2F;&#x2F;表示是从英文转到中文。</li>
</ol>
</blockquote>
]]></content>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/07/14/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>vue</title>
    <url>/2023/08/17/vue/</url>
    <content><![CDATA[<p>课程链接：<a href="https://www.bilibili.com/video/BV1Rs4y127j8?p=1&vd_source=05b9305044517a2659100450096dfe80">菜菜小趴菜vue3</a></p>
<blockquote>
<p>vue学习进度：</p>
<p>2023&#x2F;8&#x2F;17：&#x2F;40</p>
</blockquote>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>渐进式JS框架，性能出色，适用场景丰富的web前端框架</p>
<h1 id="API风格"><a href="#API风格" class="headerlink" title="API风格"></a>API风格</h1>]]></content>
  </entry>
  <entry>
    <title>word2vec</title>
    <url>/2023/07/24/word2vec/</url>
    <content><![CDATA[<p>论文地址：[<a href="https://arxiv.org/abs/1701.06279">1701.06279] dna2vec：可变长度 k-mers 的一致向量表示 (arxiv.org)</a></p>
<p>word文档：</p>
<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>NLP领域的技术，将词转化为“可计算”向量的过程</p>
<h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><p>降低维度</p>
<p>词语之间的相似性</p>
<h1 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h1><p>CBOW模型：给定上下文，预测目标词</p>
<h1 id="dna2vec：可变长度-k-mers-的一致向量表示"><a href="#dna2vec：可变长度-k-mers-的一致向量表示" class="headerlink" title="dna2vec：可变长度 k-mers 的一致向量表示"></a>dna2vec：可变长度 k-mers 的一致向量表示</h1>]]></content>
      <tags>
        <tag>NLP</tag>
      </tags>
  </entry>
  <entry>
    <title>网站搭建</title>
    <url>/2023/08/30/%E5%85%B3%E4%BA%8E%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99%E8%BF%99%E4%B8%80%E4%BB%B6%E4%BA%8B/</url>
    <content><![CDATA[<h1 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h1><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加全局前置守卫</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// const requiresAuth = to.matched.some(record =&gt; record.meta.requiresAuth);</span></span><br><span class="line">    <span class="keyword">const</span> isCookieValid = <span class="title function_">validateCookie</span>(); <span class="comment">// 调用验证 cookie 的函数</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果目标为登录页面，则直接放行导航</span></span><br><span class="line">    <span class="keyword">if</span> (to.<span class="property">path</span> === <span class="string">&#x27;/login&#x27;</span> || to.<span class="property">path</span> === <span class="string">&#x27;/admin&#x27;</span>) &#123;</span><br><span class="line">        <span class="title function_">next</span>(); <span class="comment">// 如果目标路径已经是登录路径，则直接放行导航</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isCookieValid) &#123;</span><br><span class="line">        <span class="comment">// cookie 有效，或者不需要验证，继续导航到目标页面</span></span><br><span class="line">        <span class="title function_">next</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果需要验证且 cookie 无效，重定向到登录页面</span></span><br><span class="line">        <span class="title function_">next</span>(<span class="string">&#x27;/login&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解密 DES 函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">decryptDES</span>(<span class="params">ciphertext: <span class="built_in">string</span>, key: <span class="built_in">string</span>, iv: <span class="built_in">string</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> decrypted = <span class="title class_">CryptoJS</span>.<span class="property">DES</span>.<span class="title function_">decrypt</span>(&#123;</span><br><span class="line">        <span class="attr">ciphertext</span>: <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Hex</span>.<span class="title function_">parse</span>(ciphertext),</span><br><span class="line">    &#125;, <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(key), &#123;</span><br><span class="line">        <span class="attr">iv</span>: <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Hex</span>.<span class="title function_">parse</span>(iv),</span><br><span class="line">        <span class="attr">mode</span>: <span class="title class_">CryptoJS</span>.<span class="property">mode</span>.<span class="property">CBC</span>,</span><br><span class="line">        <span class="attr">padding</span>: <span class="title class_">CryptoJS</span>.<span class="property">pad</span>.<span class="property">Pkcs7</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decrypted.<span class="title function_">toString</span>(<span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证 cookie 的函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">validateCookie</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> cookies = <span class="variable language_">document</span>.<span class="property">cookie</span>.<span class="title function_">split</span>(<span class="string">&#x27;;&#x27;</span>); <span class="comment">// 将所有 Cookie 拆分成数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; cookies.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> cookie = cookies[i].<span class="title function_">trim</span>().<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (cookie[<span class="number">0</span>] == <span class="string">&#x27;expiration_time&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> ciphertext = cookie[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">const</span> key = <span class="string">&#x27;88888888&#x27;</span>;</span><br><span class="line">            <span class="keyword">const</span> iv = <span class="string">&#x27;0000000000000000&#x27;</span>;</span><br><span class="line">            <span class="keyword">const</span> plaintext = <span class="title function_">decryptDES</span>(ciphertext, key, iv);</span><br><span class="line">            <span class="comment">// 将 plaintext 转换为数字</span></span><br><span class="line">            <span class="keyword">const</span> expiration_time = <span class="built_in">parseInt</span>(plaintext);</span><br><span class="line">            <span class="comment">// 获取当前时间戳</span></span><br><span class="line">            <span class="keyword">const</span> timestamp = <span class="title class_">Date</span>.<span class="title function_">parse</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toString</span>()) / <span class="number">1000</span>;</span><br><span class="line">            <span class="keyword">if</span> (expiration_time &gt; timestamp) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 如果 cookie 有效，返回 true</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 如果 cookie 无效，返回 false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 如果未找到 expiration_time，返回 false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure>



<h2 id="to-from-next"><a href="#to-from-next" class="headerlink" title="(to, from, next)"></a>(to, from, next)</h2><blockquote>
<p><code>(to, from, next)</code> 是 Vue Router 中全局前置守卫函数的参数，用于控制路由导航的流程。这三个参数分别代表了：</p>
<ol>
<li><code>to</code>：即将进入的目标路由对象，表示用户要导航到的路由。</li>
<li><code>from</code>：即将离开的当前路由对象，表示用户要离开的路由。</li>
<li><code>next</code>：一个回调函数，用于控制路由导航是否继续进行。它可以接受一个参数，用于指定导航的下一个步骤，如继续导航到目标路由、中断导航或重定向到其他路由。</li>
</ol>
<p>在全局前置守卫函数内部，你可以根据 <code>to</code> 和 <code>from</code> 的信息，来进行路由导航的控制和判断。<code>next</code> 函数则决定了路由是否继续进行，有以下用法：</p>
<ul>
<li><code>next()</code>：继续导航到目标路由，相当于放行。</li>
<li><code>next(false)</code>：中断导航，不进行路由切换。</li>
<li><code>next(&#39;/path&#39;)</code>：重定向到其他路径，相当于进行路由跳转。</li>
</ul>
</blockquote>
]]></content>
      <tags>
        <tag>router,部署,前端</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2023/10/02/%E6%88%90%E9%95%BF%E5%8E%86%E7%A8%8B/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/08/11/%E5%89%8D%E7%AB%AF%E7%A4%BE%E6%8B%9B%E7%AC%94%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<h1 id="百度"><a href="#百度" class="headerlink" title="百度"></a>百度</h1><h2 id="百度2020校招Web前端工程师笔试卷（第三批）"><a href="#百度2020校招Web前端工程师笔试卷（第三批）" class="headerlink" title="百度2020校招Web前端工程师笔试卷（第三批）"></a>百度2020校招Web前端工程师笔试卷（第三批）</h2><p>链接：<a href="https://zhuanlan.zhihu.com/p/544331738">请点这里</a></p>
<h3 id="1请选出3的颜色"><a href="#1请选出3的颜色" class="headerlink" title="1请选出3的颜色"></a>1请选出3的颜色</h3><p>a 蓝色 b绿色 c红色 d黄色</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">ul</span> &#123; <span class="attribute">color</span>: blue <span class="meta">!important</span>; &#125;     <span class="comment">/* 设置无序列表（ul）的文本颜色为蓝色，并使用 !important 标记，表示该样式优先级高于其他样式。 */</span></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span> &#123;  <span class="attribute">color</span>: green; &#125;          <span class="comment">/* 设置直接子级列表项（li）的文本颜色为绿色。 */</span></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">ul</span> <span class="selector-tag">li</span> + <span class="selector-tag">li</span> &#123; <span class="attribute">color</span>: red;  &#125;         <span class="comment">/* 设置列表项（li）中，紧邻前一个列表项的文本颜色为红色。 */</span></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">li</span> &#123;  <span class="attribute">color</span>: yellow;  &#125;             <span class="comment">/* 设置所有列表项（li）的文本颜色为黄色。 */</span></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>选择c</p>
<p>代码运行结果：</p>
<p><img src="D:\blog\source_posts\前端社招笔试题.assets\image-20230811165409052.png" alt="image-20230811165409052"></p>
<p>！important优先级最高，但被后面的继承覆盖掉了<br>        ul&gt; li选择父元素是 <ul> 的所有 <li> 元素<br>        ul li+li <strong>相邻兄弟选择器</strong> (+) 介于两个选择器之间，当第二个元素<em>紧跟在</em>第一个元素之后，并且两个元素都是属于同一个父元素的子元素，则第二个元素将被选中。而这里并没有指明第一个元素就是最前面的哪一个li，所以每一个li都会找自己的兄弟，结果就是除了第一个li以外的所有li都被选中。<br>        li 单个元素选择器<br>        对比优先级：3个元素选择器&gt;2个&gt;1个 所以，1、2、3三个元素的颜色分别为green、red、red</p>
</blockquote>
<h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p>下列哪项transform属性可以对元素进行旋转（）</p>
<p>A translate                                 B scale</p>
<p>C rotate                                      D skew</p>
<blockquote>
<p>选a</p>
<p>transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。</p>
</blockquote>
<h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3>]]></content>
  </entry>
  <entry>
    <title>web前端</title>
    <url>/2023/08/12/%E5%89%8D%E7%AB%AF%E4%B8%89%E4%BB%B6%E5%A5%97/</url>
    <content><![CDATA[<p>链接：<a href="https://www.bilibili.com/video/BV1jj411P7Yp/?spm_id_from=333.337.search-card.all.click&vd_source=05b9305044517a2659100450096dfe80">B站爱打篮球的编程主2023web前端开发课程html5+css3+js全套教程</a></p>
<blockquote>
<p>课程进度：</p>
<p>2023&#x2F;8&#x2F;12：13&#x2F;126</p>
<p>2023&#x2F;8&#x2F;14：21&#x2F;126</p>
<p>2023&#x2F;8&#x2F;15：28&#x2F;126</p>
<p>2023&#x2F;8&#x2F;16：40&#x2F;126</p>
<p>2023&#x2F;8&#x2F;17：60&#x2F;126</p>
<p>2023&#x2F;8&#x2F;18：71&#x2F;126</p>
<p>2023&#x2F;8&#x2F;19：78&#x2F;126</p>
<p>2023&#x2F;8&#x2F;20：89&#x2F;126</p>
<p>2023&#x2F;8&#x2F;21：111&#x2F;126</p>
<p>2023&#x2F;8&#x2F;25：126&#x2F;126</p>
</blockquote>
<h1 id="html5"><a href="#html5" class="headerlink" title="html5"></a>html5</h1><h2 id="基本骨架"><a href="#基本骨架" class="headerlink" title="基本骨架"></a>基本骨架</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>DOCTYPE生命避免浏览器的怪异模式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">titlt</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>title标签的增加有利于SEO优化（搜索引擎优化），满足搜索引擎的排名需求。</p>
<h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><h3 id="meta标签"><a href="#meta标签" class="headerlink" title="meta标签"></a>meta标签</h3><p>针对浏览器的配置</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge,chrome=1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;content-type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="常用文本标签"><a href="#常用文本标签" class="headerlink" title="常用文本标签"></a>常用文本标签</h3><p><img src="D:\blog\source_posts\前端三件套.assets\image-20230814111315495.png" alt="image-20230814111315495"></p>
<h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>正确使用<h1>-<h6>标签有利于提升网站排名，只用于标题标签。</p>
<h3 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><p>可以在不产生新段落的情况下换行</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span> 或者 <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="水平线"><a href="#水平线" class="headerlink" title="水平线"></a>水平线</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>包含四个属性：color，width，size（高度），align（对齐方式，left和right）</p>
<h3 id="图片路径"><a href="#图片路径" class="headerlink" title="图片路径"></a>图片路径</h3><h4 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h4><p>同级关系 .&#x2F;(可以省略)</p>
<p>子级关系&#x2F;</p>
<p>父级关系..&#x2F;</p>
<h4 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h4><h4 id="网络路径"><a href="#网络路径" class="headerlink" title="网络路径"></a>网络路径</h4><h3 id="超文本链接"><a href="#超文本链接" class="headerlink" title="超文本链接"></a>超文本链接</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href&gt;&lt;/a&gt;</span><br><span class="line">a标签里面可以放任意内容</span><br></pre></td></tr></table></figure>



<h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ol&gt;&lt;/ol&gt;</span><br><span class="line">属性type可以选择：1，a，A，i，I</span><br></pre></td></tr></table></figure>



<h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;&lt;/ul&gt;</span><br><span class="line">属性type可以选择：disc（实心圆），circle（空心圆），square（小方块），none（不显示）</span><br></pre></td></tr></table></figure>

<p>无序列表和多个列表项的快捷键：ul&gt;li*2（想要的数字）</p>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;table&gt;&lt;/table&gt;</span><br><span class="line">&lt;tr&gt;&lt;/tr&gt;行</span><br><span class="line">&lt;td&gt;&lt;/td&gt;列</span><br></pre></td></tr></table></figure>

<p>快捷键：table&gt;tr * 4(想要的数字）&gt;td * 4（想要的数字）{想要的文本信息}</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">table&gt;tr*4&gt;td*4&#123;单元格&#125;</span><br></pre></td></tr></table></figure>

<h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><p>水平合并（colspan）：保留左边删除右边 </p>
<p>垂直合并（rowspan）：保留上边删除下边</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//水平合并</span><br><span class="line">//原本代码</span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格6<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格7<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//合并单元格6和7</span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>单元格6和单元格7<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//垂直合并</span><br><span class="line">//原本代码</span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格15<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格20<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//合并单元格15和20</span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>&quot;<span class="attr">2</span>&quot;&gt;</span>单元格15和单元格20<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//既有水平合并又有垂直合并</span><br><span class="line">//原本代码</span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格16<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格17<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格21<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格22<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//合并16，17，21，22</span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span>单元格16，17，21，22<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="Form表单"><a href="#Form表单" class="headerlink" title="Form表单"></a>Form表单</h3><p>作用：让网站具有交互性，有用户输入的地方，就一定有表单</p>
<p>概念：由容器和控件组成</p>
<p>属性：action（服务器地址），method（get用于提交少量数据，post用于提交大量数据；get提交的数据url可以看到而post看不到），name</p>
<p>组成：表单标签（form标签），表单域（输入框），表单按钮</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span>&gt;</span>//输入框</span><br><span class="line">    </span><br><span class="line">    //按钮的两种方式</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span></span><br><span class="line">        按钮</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="表单元素"><a href="#表单元素" class="headerlink" title="表单元素"></a>表单元素</h4><h5 id="文本框"><a href="#文本框" class="headerlink" title="文本框"></a>文本框</h5><p>文本域：用户要输入字母，数字等内容时</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    First name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;firstname&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    Last name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lastname&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>密码框</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    Password: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>提交按钮</p>
<p>action属性定义了目的文件的文件名</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;需要替换的文本&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="h5新增标签"><a href="#h5新增标签" class="headerlink" title="h5新增标签"></a>h5新增标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//注意兼容性问题</span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span>//头部</span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span><span class="tag">&lt;/<span class="name">nav</span>&gt;</span>//导航栏</span><br><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span><span class="tag">&lt;/<span class="name">section</span>&gt;</span>//定义文章的节，比如章节，页眉，页脚</span><br><span class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span>//定义完整的内容块，例如一篇完整的论坛帖子，一篇博客文章，一个用户评论等</span><br><span class="line"><span class="tag">&lt;<span class="name">aside</span>&gt;</span><span class="tag">&lt;/<span class="name">aside</span>&gt;</span>//侧边栏标签</span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span>//底部</span><br></pre></td></tr></table></figure>



<h3 id="单标签"><a href="#单标签" class="headerlink" title="单标签"></a>单标签</h3><p>meta</p>
<p>img</p>
<p>br</p>
<p>hr</p>
<p>input</p>
<p>link</p>
<h2 id="块元素和行内元素（内联元素）"><a href="#块元素和行内元素（内联元素）" class="headerlink" title="块元素和行内元素（内联元素）"></a>块元素和行内元素（内联元素）</h2><h3 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h3><p>在html5之前元素分类为块级元素和内联元素</p>
<p>在html5之后元素按内容模型来区分，分为：元数据型，区块型，标题型，文档流型，语句型，内嵌型，交互型。</p>
<p>如果元素不属于任一类别，则称为穿透的。</p>
<p>元素属于多个类别时，称为混合的</p>
<h3 id="两者区别"><a href="#两者区别" class="headerlink" title="两者区别"></a>两者区别</h3><p>块级元素默认100%的宽度</p>
<p><img src="D:\blog\source_posts\前端三件套.assets\image-20230814111328649.png" alt="image-20230814111328649"></p>
<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>常见块级元素：div，form，h1-h6，hr，p，table，ul等</p>
<p>常见内联元素：a，b，em，i，span，strong等</p>
<p>行内块级元素（特点：不换行，能够识别宽高）：button，img，input等</p>
<h3 id="如何设置行内元素的宽高"><a href="#如何设置行内元素的宽高" class="headerlink" title="如何设置行内元素的宽高"></a>如何设置行内元素的宽高</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">span</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: block;//将内联元素变成行内元素</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">span</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: inline;//将行内元素变成内联元素</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注释内容--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>快捷键：ctrl+&#x2F;</p>
<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>文件后缀：.css</p>
<p>组成：选择器，以及一条或多条声明</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h1</span>&#123;//选择器</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: blue;//一条声明，由属性和值组成</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="引入方式"><a href="#引入方式" class="headerlink" title="引入方式"></a>引入方式</h2><h3 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red;font-size: 30px&quot;</span>&gt;</span></span><br><span class="line">    我是内联样式方案</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>缺点：维护成本高，缺乏整体性和规划性</p>
<h3 id="内部样式"><a href="#内部样式" class="headerlink" title="内部样式"></a>内部样式</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h1</span>&#123;//选择器</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: blue;//一条声明，由属性和值组成</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>缺点：在多个页面之间容易混乱</p>
<h3 id="外部样式"><a href="#外部样式" class="headerlink" title="外部样式"></a>外部样式</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;xxx.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><p>所有的标签都可以是选择器</p>
<p>选择所有，而不是一个</p>
<h3 id="全局选择器"><a href="#全局选择器" class="headerlink" title="全局选择器"></a>全局选择器</h3><p>作用：优先级最低，一般做样式初始化</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">	<span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="元素选择器"><a href="#元素选择器" class="headerlink" title="元素选择器"></a>元素选择器</h3><p>html的元素：p，b，div，a，img，body，span等</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>&#123;//选择器</span><br><span class="line">    <span class="attribute">color</span>: blue;//一条声明，由属性和值组成</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;oneclass&quot;</span>&gt;</span></span><br><span class="line">    段落</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;class&quot;</span>&gt;</span></span><br><span class="line">    段落</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.oneclass</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.oneclass</span>,<span class="selector-class">.class</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ID选择器"><a href="#ID选择器" class="headerlink" title="ID选择器"></a>ID选择器</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;oneclass&quot;</span>&gt;</span></span><br><span class="line">    段落</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">#oneclass&#123;</span><br><span class="line">    width: 800px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p>权重用数字衡量</p>
<blockquote>
<p>元素选择器：1</p>
<p>类选择器：10</p>
<p>id选择器：100</p>
<p>内联样式选择器：1000</p>
<p>优先级排序从高到低：行内样式&gt;ID选择器&gt;类选择器&gt;元素选择器</p>
</blockquote>
<h2 id="字体属性"><a href="#字体属性" class="headerlink" title="字体属性"></a>字体属性</h2><p>字体，颜色，大小，加粗，字体样式</p>
<h3 id="color"><a href="#color" class="headerlink" title="color"></a>color</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//单词表示</span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">	<span class="attribute">color</span>: red;//红色</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//十六进制表示</span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#00ff00</span>;//绿色</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//rgb表示 red green blue</span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>);//黑色</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//rgba表示 <span class="selector-tag">a</span>表示透明度</span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>);//黑色，<span class="selector-tag">a</span>=<span class="number">1</span>表示完全不透明度，表示范围：<span class="number">0</span>~<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="font-size"><a href="#font-size" class="headerlink" title="font-size"></a>font-size</h3><blockquote>
<p>最小是12px</p>
</blockquote>
<h3 id="font-weight"><a href="#font-weight" class="headerlink" title="font-weight"></a>font-weight</h3><blockquote>
<p>blod,bloder,lighter,数字</p>
<p>数字的范围：100-900，400表示默认，700表示blod</p>
</blockquote>
<h3 id="font-style"><a href="#font-style" class="headerlink" title="font-style"></a>font-style</h3><blockquote>
<p>italic（斜体），normal（正常）</p>
</blockquote>
<h3 id="font-family"><a href="#font-family" class="headerlink" title="font-family"></a>font-family</h3><blockquote>
<p>常规字体：微软雅黑</p>
</blockquote>
<h2 id="背景属性"><a href="#背景属性" class="headerlink" title="背景属性"></a>背景属性</h2><blockquote>
<p>background-color 背景颜色</p>
<p>background-image 背景图片</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">background-image: url(&quot;&quot;);</span><br></pre></td></tr></table></figure>

<p>background-position 背景图片的显示位置</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">background-position: ；</span><br><span class="line">//left top 左上角</span><br><span class="line">//left center 左中</span><br><span class="line">//left bottom 坐下</span><br><span class="line">//对应的可以把left换成right，center</span><br><span class="line">x% y% x是水平 y是垂直</span><br><span class="line">xpos ypos//像素</span><br></pre></td></tr></table></figure>

<p>background-repeat 背景图片如何填充</p>
<blockquote>
<p>repeat 默认值</p>
<p>repeat-x 只向水平方向平铺</p>
<p>repeat-y 只向垂直方向平铺</p>
<p>no-repeat 不平铺</p>
</blockquote>
<p>background-size 背景图片的大小属性</p>
<blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">background-size： 1200px 1200px；</span><br><span class="line">background-size： 50% 100%；</span><br></pre></td></tr></table></figure>

<p>cover：图片比例不变，缩放成完全覆盖背景区域的最小大小</p>
<p>contain：图片比例不变，缩放成完全覆盖背景区域的最大大小</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">background-size： cover；//最常见</span><br><span class="line">background-size： contain；</span><br></pre></td></tr></table></figure>


</blockquote>
</blockquote>
<h2 id="文本属性"><a href="#文本属性" class="headerlink" title="文本属性"></a>文本属性</h2><blockquote>
<p><strong>text-align 文本水平对齐方式</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">text-align: left;</span><br><span class="line">//left是默认，center，right</span><br></pre></td></tr></table></figure>

<p><strong>text-decoration 文本的修饰</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">text-decoration: overline;</span><br><span class="line">//underline， overline 上划线，line-through 删除线</span><br></pre></td></tr></table></figure>

<p><strong>text-transform文本的大小写</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">captialize 单词开头大写，uppercase 全部大写， lowercase 全部小写</span><br></pre></td></tr></table></figure>

<p><strong>text-indent块中首行文本缩进</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">text-indent: 20px;//两个单词是30px</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="表格属性"><a href="#表格属性" class="headerlink" title="表格属性"></a>表格属性</h2><h3 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">table</span>,<span class="selector-tag">td</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="折叠边框"><a href="#折叠边框" class="headerlink" title="折叠边框"></a>折叠边框</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">table</span>&#123;</span><br><span class="line">    <span class="attribute">border-collapse</span>: collapse;//折叠</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="表格宽度"><a href="#表格宽度" class="headerlink" title="表格宽度"></a>表格宽度</h3><h3 id="表格高度"><a href="#表格高度" class="headerlink" title="表格高度"></a>表格高度</h3><h3 id="表格文字对齐"><a href="#表格文字对齐" class="headerlink" title="表格文字对齐"></a>表格文字对齐</h3><blockquote>
<p>默认是左中对齐</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//水平对齐方式<span class="selector-pseudo">:left</span>,center,<span class="attribute">right</span></span><br><span class="line"><span class="selector-tag">td</span>&#123;</span><br><span class="line">    <span class="attribute">text-align</span>: right;//一般给<span class="selector-tag">td</span>加</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//垂直对齐方式:top,center,bottom</span><br><span class="line">td&#123;</span><br><span class="line">    <span class="attribute">vertical-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="表格填充"><a href="#表格填充" class="headerlink" title="表格填充"></a>表格填充</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">td</span>&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;//四个方向的撑开</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="表格颜色"><a href="#表格颜色" class="headerlink" title="表格颜色"></a>表格颜色</h3><h2 id="关系选择器"><a href="#关系选择器" class="headerlink" title="关系选择器"></a>关系选择器</h2><h3 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h3><blockquote>
<p>定义：选择所有被E元素包含的F原色，中间用空格隔开</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">语法：E F&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//<span class="number">4</span>,<span class="number">5</span>都会生效，因为<span class="selector-tag">ol</span>里面的<span class="selector-tag">li</span>是<span class="selector-tag">ul</span>的重孙</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="子代选择器"><a href="#子代选择器" class="headerlink" title="子代选择器"></a>子代选择器</h3><blockquote>
<p>选择作为E元素的直接子元素F，对更深一层的元素不起作用，用&gt;表示</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">语法：E&gt;f&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        大家好</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                我很好</span><br><span class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&gt;<span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只有大家好变成红色，我很好没有变成红色</p>
</blockquote>
<h3 id="相邻兄弟选择器"><a href="#相邻兄弟选择器" class="headerlink" title="相邻兄弟选择器"></a>相邻兄弟选择器</h3><blockquote>
<p>选择紧跟E元素后的F元素，用加号表示，选择相邻的第一个兄弟元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">语法：E+F&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span></span><br><span class="line">    我是标题</span><br><span class="line"><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    我是内容1</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    我是内容2</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h3</span>+<span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只有我是内容1变成红色</p>
</blockquote>
<h3 id="通用选择器"><a href="#通用选择器" class="headerlink" title="通用选择器"></a>通用选择器</h3><blockquote>
<p>选择E元素之后所有兄弟元素F，作用于多个元素，用~隔开</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">语法：E~F&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">    我是标题</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    我是内容1</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    我是内容2</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    我是内容3</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>~<span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所有内容都变成红色</p>
</blockquote>
<h2 id="CSS盒子模型-Box-Model"><a href="#CSS盒子模型-Box-Model" class="headerlink" title="CSS盒子模型 Box Model"></a>CSS盒子模型 Box Model</h2><blockquote>
<p>content：盒子内容，显示文本和图像</p>
<p>padding内边距：清除内容周围区域，可以有两个值，第一个值上下，第二个值左右</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">padding-left</span>: <span class="number">50px</span>;</span><br><span class="line"><span class="attribute">padding-right</span>: <span class="number">50px</span>;</span><br><span class="line"><span class="attribute">padding-top</span>: <span class="number">50px</span>;</span><br><span class="line"><span class="attribute">padding-bottom</span>: <span class="number">50px</span>;</span><br></pre></td></tr></table></figure>

<p>border：围绕在内边距和内容的边框</p>
<p>margin外边距：清除边框外的区域，是透明的，可以有两个值，第一个值上下，第二个值左右</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">margin</span>: <span class="number">0</span> auto;//auto指的是网页的正中间，无关网页大小的调整</span><br></pre></td></tr></table></figure>


</blockquote>
<h3 id="弹性盒子模型-flex-box"><a href="#弹性盒子模型-flex-box" class="headerlink" title="弹性盒子模型 flex box"></a>弹性盒子模型 flex box</h3><p>概念：一种当页面需要适应不同的屏幕大小及设备类型时确保元素拥有恰当的行为的布局方式。</p>
<p>组成：弹性容器+弹性子元素</p>
<p>默认：弹性盒子的子元素默认水平摆放</p>
<h4 id="flex属性"><a href="#flex属性" class="headerlink" title="flex属性"></a>flex属性</h4><p>作用于父级元素（弹性容器）</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: row;//子元素的摆放位置</span><br><span class="line">    //row水平摆放，row-reverse水平翻转,column垂直摆放，column-reverse垂直翻转</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="justify-content属性"><a href="#justify-content属性" class="headerlink" title="justify-content属性"></a>justify-content属性</h4><p>&#x2F;&#x2F;垂直方向</p>
<p>作用于父级元素（弹性容器）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">justify-content： flex-start;//子元素在垂直方向的对齐方式</span><br><span class="line">//flex-end;center</span><br></pre></td></tr></table></figure>

<h4 id="align-items属性"><a href="#align-items属性" class="headerlink" title="align-items属性"></a>align-items属性</h4><p>&#x2F;&#x2F;水平方向</p>
<p>作用于父级元素（弹性容器）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">align-items: flex-start;//子元素在水平方向对齐方式</span><br><span class="line">//flex-end,center</span><br></pre></td></tr></table></figure>

<h4 id="flex属性-1"><a href="#flex属性-1" class="headerlink" title="flex属性"></a>flex属性</h4><p>作用在<strong>子元素</strong>上</p>
<p>概念：根据弹性盒子元素所设置的扩展因子作为比率来分配剩余的空间</p>
<p>默认值为0</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">flex</span>: <span class="number">1</span>;//权重</span><br></pre></td></tr></table></figure>

<p>当权重设置以后，它的宽度就不再生效</p>
<h2 id="文档流"><a href="#文档流" class="headerlink" title="文档流"></a>文档流</h2><p>概念：文档中可显示对象在排列时所占用的位置&#x2F;空间</p>
<h3 id="标准流"><a href="#标准流" class="headerlink" title="标准流"></a>标准流</h3><p>例如：块元素自上而下摆放，内联元素从左到右摆放（容易导致页面效果无法实现）</p>
<blockquote>
<p>目前的问题：</p>
<p>高矮不齐，底边对齐</p>
<p>空格折叠</p>
<p>元素无空隙</p>
</blockquote>
<h3 id="脱离文档流"><a href="#脱离文档流" class="headerlink" title="脱离文档流"></a>脱离文档流</h3><h4 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h4><p>概念：增加一个浮层来放置内容，相当于有两层页面，一个是底层的原页面，一层是脱离文档流的上层页面</p>
<p>float：定义元素向哪个方向浮动，任何元素都可以浮动</p>
<p>注意：只能左右浮动，没有上下浮动。当元素不够的时候，会自动换行</p>
<p><img src="D:\blog\source_posts\前端三件套.assets\image-20230816100959613.png" alt="image-20230816100959613"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">float</span>: left;</span><br><span class="line">//<span class="attribute">right</span></span><br></pre></td></tr></table></figure>

<h5 id="副作用"><a href="#副作用" class="headerlink" title="副作用"></a>副作用</h5><blockquote>
<p>1、造成父元素高度塌陷</p>
<p>2、后续元素会受到影响</p>
</blockquote>
<h5 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h5><blockquote>
<p>解决方案：</p>
<p>1、父元素设置高度</p>
<p>2、受影响的元素设置clear属性</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">clear</span>: left;//清除左浮动</span><br><span class="line">//<span class="attribute">right</span>,both(左右浮动都清除)</span><br></pre></td></tr></table></figure>

<p>3、overflow清除浮动</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//两个属性要一起写在父级元素里面</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">clear</span>: both;</span><br></pre></td></tr></table></figure>

<p>4、伪对象方式</p>
<p>这种情况下父级元素不能设置高度</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//给父级元素添加伪对象</span><br><span class="line"><span class="selector-class">.container</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</blockquote>
<h4 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//<span class="attribute">position</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">position</span>: relative；</span><br><span class="line"></span><br><span class="line">//<span class="built_in">relative</span>(相对定位)，<span class="built_in">absolute</span>(绝对定位)，fixed（固定定位）</span><br><span class="line">//绝对定位和固定定位	会脱离文件流</span><br></pre></td></tr></table></figure>



<h5 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h5><p>没有脱离文档流，但是可以调整定位</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//调整位置：<span class="attribute">left</span>,<span class="attribute">top</span>,<span class="attribute">right</span>,<span class="attribute">bottom</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>： relative;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h5><p>脱离文档流，并且可以调整定位，每设置一个定位，就有一层</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>:  absolute;</span><br><span class="line">&#125;</span><br><span class="line">//调整位置：<span class="attribute">left</span>,<span class="attribute">top</span>,<span class="attribute">right</span>,<span class="attribute">bottom</span></span><br></pre></td></tr></table></figure>

<h5 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h5><p>脱离文档流，并且可以调整定位。一般一个页面只有一个固定定位，屏幕滚动，但是内容不会变化位置</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">&#125;</span><br><span class="line">//调整位置：<span class="attribute">left</span>,<span class="attribute">top</span>,<span class="attribute">right</span>,<span class="attribute">bottom</span></span><br></pre></td></tr></table></figure>

<h5 id="温馨提示"><a href="#温馨提示" class="headerlink" title="温馨提示"></a>温馨提示</h5><p>设置定位以后，相对定位和绝对定位是相对于具有定位的父级元素进行位置调整，如果父级元素不存在定位，则继续向上逐级寻找，直到找到顶层文档。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;//父级元素</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span>&#123;//子级元素</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Z-index"><a href="#Z-index" class="headerlink" title="Z-index"></a>Z-index</h5><p>哪一个值大，就是覆盖别的层</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.box&#123;//子级元素</span><br><span class="line">    position: absolute;</span><br><span class="line">    z-index: 100;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.box&#123;//子级元素</span><br><span class="line">    position: absolute;</span><br><span class="line">    z-index: 50;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="CSS3新特性"><a href="#CSS3新特性" class="headerlink" title="CSS3新特性"></a>CSS3新特性</h2><h3 id="圆角"><a href="#圆角" class="headerlink" title="圆角"></a>圆角</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    //<span class="number">100%</span>，<span class="number">50%</span>:完全变成圆形</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>规则如下：</p>
<p>一个值：四个圆角值相同</p>
<p>两个值：第一个值为左上角和右下角，第二个值为右上角和左下角</p>
<p>三个值：第一个值为左上角，第二个值为右上角和左下角，第三个值为右下角</p>
<p>四个值：第一个值为左上角，第二个值为右上角，第三个值为右下角，第四个值为左下角</p>
</blockquote>
<h3 id="阴影"><a href="#阴影" class="headerlink" title="阴影"></a>阴影</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">20px</span> <span class="built_in">rgb</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br><span class="line">//h-shadow水平阴影位置（必选），v-shadow垂直阴影位置（必选），blur模糊距离，<span class="attribute">color</span>阴影颜色</span><br></pre></td></tr></table></figure>

<h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><p>比js更具有性能</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> name&#123;//创建动画</span><br><span class="line">    <span class="selector-tag">from</span>&#123;//<span class="number">0%</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">to</span>&#123;//<span class="number">100%</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//以上只有一个变化过程</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> name&#123;//创建动画</span><br><span class="line">    <span class="number">0%</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">50%</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">100%</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="执行动画"><a href="#执行动画" class="headerlink" title="执行动画"></a>执行动画</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">animation</span>: name duration timing-function delay iteration-count direction;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span>&#123;//鼠标划到的地方变颜色</span><br><span class="line">    <span class="attribute">background-color</span>: coral;</span><br><span class="line">    <span class="attribute">animation-play-state</span>: paused;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>name:动画的名称</p>
<p>duration：设置动画的持续时间（要加s）</p>
<p>timing-function：设置动画的速率：</p>
<p>​	ease：逐渐变慢</p>
<p>​	linear：匀速</p>
<p>​	ease-in：加速</p>
<p>​	ease-out：减速</p>
<p>​	ease-in-out：先加速后减速</p>
<p>delay：设置动画的开始时间（延迟执行）</p>
<p>iteration-count：循环次数，infinite为无限次数的循环</p>
<p>direction：动画播放的方向</p>
<p>​	normal：向前播放</p>
<p>​	alternate：动画在第偶数次向前播放，在第奇数次反方向播放</p>
<p>animation-play-state：动画的播放状态，running是播放，paused是播放停止</p>
</blockquote>
<h4 id="呼吸效果"><a href="#呼吸效果" class="headerlink" title="呼吸效果"></a>呼吸效果</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> name&#123;//创建动画</span><br><span class="line">    <span class="number">0%</span>&#123;</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">0.2</span>;//透明度</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">50%</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">100%</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h3><blockquote>
<p>概念：媒体查询能在不同的条件下使用不同的模式</p>
<p>使页面在不同在终端设备下达到不同的效果</p>
<p>根据设备的大小自动识别加载不同的样式</p>
</blockquote>
<h4 id="设置meta标签"><a href="#设置meta标签" class="headerlink" title="设置meta标签"></a>设置meta标签</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//使用设备的宽度作为视图宽度并禁止初始的缩放</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no&quot;</span>&gt;</span></span><br><span class="line">//width=device-width宽度相当于设备的宽度</span><br><span class="line">//initial-scale=1初始的缩放比例（默认设置为1.0）</span><br><span class="line">//maximum允许用户缩放到的最大比例（默认设置为1.0）</span><br><span class="line">//user-scalable用户是否可以手动缩放</span><br></pre></td></tr></table></figure>

<h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">768px</span>)&#123;//意味这是手机</span><br><span class="line">	<span class="selector-class">.box</span>&#123;</span><br><span class="line">		<span class="attribute">display</span>: none;//不显示</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>:<span class="number">768px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">996px</span>)&#123;//意味这是平板</span><br><span class="line">	<span class="selector-class">.box</span>&#123;</span><br><span class="line">		<span class="attribute">display</span>: block;//显示</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>:<span class="number">996px</span>)&#123;//意味这是电脑</span><br><span class="line">	<span class="selector-class">.box</span>&#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="雪碧图"><a href="#雪碧图" class="headerlink" title="雪碧图"></a>雪碧图</h3><blockquote>
<p>CSS Sprite&#x3D;CSS精灵图&#x3D;CSS雪碧图，是一种网页图片应用处理方式，它允许你将一个页面涉及到的所有零星图片都包含到一张大图中去。</p>
<p>优点：</p>
<p>减少图片的字节</p>
<p>减少网页的http请求，从而大大的提高页面的性能</p>
<p>原理：</p>
<p>通过background-image引入背景图片</p>
<p>通过background-position把背景图片移动到自己需要的位置</p>
</blockquote>
<h3 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h3><blockquote>
<p>问题：</p>
<p>图标使用时可能会失真，并且可能会加载过慢</p>
<p>优点：</p>
<p>轻量性：加载速度快，减少http请求</p>
<p>灵活性：CSS设置大小和颜色</p>
<p>兼容性：支持多版浏览器</p>
</blockquote>
<h2 id="注释-1"><a href="#注释-1" class="headerlink" title="注释"></a>注释</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/*内容*/</span></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><blockquote>
<p>脚本语言，不具备开发操作系统的能力，只用来编写控制其他大型应用程序的”脚本“</p>
<p>嵌入式语言</p>
</blockquote>
<h2 id="JS和ECMAScript的关系"><a href="#JS和ECMAScript的关系" class="headerlink" title="JS和ECMAScript的关系"></a>JS和ECMAScript的关系</h2><p>ECMAScript是JS的规格，JS是ECMAScript的一种实现</p>
<p><img src="D:\blog\source_posts\前端三件套.assets\image-20230816213348171.png" alt="image-20230816213348171"></p>
<h2 id="语句、标识符"><a href="#语句、标识符" class="headerlink" title="语句、标识符"></a>语句、标识符</h2><blockquote>
<p>js的执行单位是行，一般情况下，一行是一个语句，以分号结尾</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> num=<span class="number">10</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>标识符：</p>
<p>识别各种值得合法名称，最常见的是变量名</p>
<p>组成：由字母，美元符号，下划线和数字。除了数字不能开头，其他都可以。</p>
</blockquote>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">console.log(num)</span><br></pre></td></tr></table></figure>

<h3 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h3><blockquote>
<p>JS工作方式：先解析代码，获取所有被声明的变量，然后再一行一行地运行。这导致所有的变量的声明语句，都会被提升到代码的头部。这就是变量提升。</p>
</blockquote>
<h2 id="引入文件方式"><a href="#引入文件方式" class="headerlink" title="引入文件方式"></a>引入文件方式</h2><p>可以在body和head中引入</p>
<blockquote>
<p>1、嵌入到html中</p>
<p>2、引入本地独立js文件</p>
<p>3、引入网络来源文件</p>
</blockquote>
<h3 id="嵌入到html中"><a href="#嵌入到html中" class="headerlink" title="嵌入到html中"></a>嵌入到html中</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> age = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="引入本地独立js文件"><a href="#引入本地独立js文件" class="headerlink" title="引入本地独立js文件"></a>引入本地独立js文件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age=<span class="number">20</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age);</span><br></pre></td></tr></table></figure>

<p>在html里面引入</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;xxx.js&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="引入网络来源文件"><a href="#引入网络来源文件" class="headerlink" title="引入网络来源文件"></a>引入网络来源文件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="注释和常见输出方式"><a href="#注释和常见输出方式" class="headerlink" title="注释和常见输出方式"></a>注释和常见输出方式</h2><blockquote>
<p><strong>注释：</strong></p>
<p>单行&#x2F;多行</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//单行注释</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">多行</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">注释</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">*/</span></span></span><br><span class="line"><span class="language-javascript">&lt;script&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>输出方式：</strong></p>
<p>弹出框</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&quot;我是弹出框&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>页面输出</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;我是输出到页面&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>控制台输出</p>
</blockquote>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>六种</p>
<h3 id="分类-1"><a href="#分类-1" class="headerlink" title="分类"></a>分类</h3><blockquote>
<p>原始数据类型包括：数值，字符串，布尔值</p>
<p>合成数据类型（复合&#x2F;引用数据类型）：object，对象，多个原始数据类型的值合成</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">var user=&#123;</span><br><span class="line">	name: &quot;11&quot;,</span><br><span class="line">    age: 20,</span><br><span class="line">    learn:true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>特殊值：null，undefined</p>
</blockquote>
<h4 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h4><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><blockquote>
<p>被双引号和单引号包裹的值</p>
</blockquote>
<h4 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h4><h4 id="null"><a href="#null" class="headerlink" title="null"></a>null</h4><h4 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h4><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><h4 id="Symbol（ES6新增）"><a href="#Symbol（ES6新增）" class="headerlink" title="Symbol（ES6新增）"></a>Symbol（ES6新增）</h4><h4 id="BigInt（ES6新增）"><a href="#BigInt（ES6新增）" class="headerlink" title="BigInt（ES6新增）"></a>BigInt（ES6新增）</h4><h3 id="typeof运算符"><a href="#typeof运算符" class="headerlink" title="typeof运算符"></a>typeof运算符</h3><p>作用：判断数据类型，一般用来判断基本数据类型</p>
<p>判断复合数据类型 不准确</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> age);<span class="comment">//number</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> name);<span class="comment">//string</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> flag);<span class="comment">//boolean</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> user);<span class="comment">//object</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">null</span>);<span class="comment">//object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">undefined</span>);<span class="comment">//undefined</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>null代表对象没有</p>
<p>undefined代表数值没有</p>
</blockquote>
<h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><blockquote>
<p>加减乘除，自增，自减</p>
</blockquote>
<h3 id="加减乘除"><a href="#加减乘除" class="headerlink" title="加减乘除"></a>加减乘除</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num1+num2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num1-num2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num1*num2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num1/num2);</span><br></pre></td></tr></table></figure>

<h3 id="取余"><a href="#取余" class="headerlink" title="取余"></a>取余</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num1%num2);</span><br></pre></td></tr></table></figure>

<h3 id="自增自减运算符"><a href="#自增自减运算符" class="headerlink" title="自增自减运算符"></a>自增自减运算符</h3><blockquote>
<p>一元运算符，只需要一个运算符。它们的作用将运算子首先转为数值，然后加上1或减去1</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">++和--在前面，应该先自增，自减再运算</span><br><span class="line">num3=<span class="number">20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(++num);<span class="comment">//21</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(--num);<span class="comment">//20</span></span><br><span class="line"></span><br><span class="line">++和--在后面，应该先运算再自增，自减</span><br><span class="line">num3=<span class="number">20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num++);<span class="comment">//20。先打印后自增</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num--);<span class="comment">//21</span></span><br></pre></td></tr></table></figure>



<h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><blockquote>
<p>x&#x3D;x+y      x+&#x3D;y</p>
<p>x&#x3D;x-y       x-&#x3D;y</p>
<p>x&#x3D;x * y      x*&#x3D;y</p>
<p>x&#x3D;x&#x2F;y       x&#x2F;&#x3D;y</p>
<p>x&#x3D;x%y       x%&#x3D;y</p>
</blockquote>
<h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><blockquote>
<p>“&gt;”,”&lt;”,”&gt;&#x3D;”,”&lt;&#x3D;”</p>
<p>&#x3D;&#x3D;相等运算符，比较两个值是否相等</p>
<p><strong>&#x3D;&#x3D;&#x3D;严格相等运算符，比较两个值是否相等，比较两个值的类型是否相同</strong></p>
<p>!&#x3D;不相等运算符，比较两个值是否不相等</p>
<p><strong>!&#x3D;&#x3D;严格不相等运算符，比较两个值是否不相等，比较两个值的类型是否不同</strong></p>
</blockquote>
<h2 id="布尔运算符"><a href="#布尔运算符" class="headerlink" title="布尔运算符"></a>布尔运算符</h2><blockquote>
<p>取反运算符！</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//非布尔值取反</span></span><br><span class="line"><span class="comment">//对于非布尔值，取反运算符会先将其转为布尔值，再取反。以下六个值取反后为true，其余取反后为false</span></span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line"><span class="literal">null</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="title class_">NaN</span></span><br><span class="line"><span class="string">&quot;&quot;</span>（空字符串）</span><br></pre></td></tr></table></figure>



<p>且运算符&amp;&amp;</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span>&lt;<span class="number">20</span> &amp;&amp; <span class="number">100</span>&gt;<span class="number">90</span>)</span><br></pre></td></tr></table></figure>



<p>或运算符||</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span>&lt;<span class="number">20</span> || <span class="number">100</span>&gt;<span class="number">90</span>)</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(flag或者 表达式)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="if-else语句"><a href="#if-else语句" class="headerlink" title="if-else语句"></a>if-else语句</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(flag或者 表达式)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="else-if语句"><a href="#else-if语句" class="headerlink" title="else-if语句"></a>else-if语句</h3><blockquote>
<p>语法规则：</p>
<p>if总是找离他最近的一个else</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(flag或者 表达式)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Switch语句"><a href="#Switch语句" class="headerlink" title="Switch语句"></a>Switch语句</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>()&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;<span class="comment">//必须加上break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="三元（目）运算符"><a href="#三元（目）运算符" class="headerlink" title="三元（目）运算符"></a>三元（目）运算符</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//语法：（条件）?表达式1:表达式2</span></span><br><span class="line">num%<span class="number">2</span>===<span class="number">0</span> ? consle.<span class="title function_">log</span>(<span class="string">&quot;偶数&quot;</span>) :<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;奇数&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> result= num%<span class="number">2</span>===<span class="number">0</span> ? <span class="string">&quot;偶数&quot;</span> : <span class="string">&quot;奇数&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure>



<h2 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始表达式;条件;迭代因子)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="While语句"><a href="#While语句" class="headerlink" title="While语句"></a>While语句</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(条件)&#123;</span><br><span class="line">    语句；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h2><p>跳出所有循环</p>
<h2 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h2><p>跳出当前循环，进入下一次循环</p>
<h2 id="字符串-1"><a href="#字符串-1" class="headerlink" title="字符串"></a>字符串</h2><h3 id="基础知识-1"><a href="#基础知识-1" class="headerlink" title="基础知识"></a>基础知识</h3><blockquote>
<p>单双引号可以互相嵌套</p>
<p>如果要在单引号字符串的内部使用单引号，就必须在内部的单引号前面加上反斜杠，用来转义</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;我们都知道书籍是要\&quot;阅读\&quot;的。&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>字符串默认写成一行，多行会报错。如果要换行，要加上\进行转义</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;a \</span></span><br><span class="line"><span class="string">b \</span></span><br><span class="line"><span class="string">cfdghh&quot;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="length属性"><a href="#length属性" class="headerlink" title="length属性"></a>length属性</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="property">length</span>);</span><br></pre></td></tr></table></figure>



<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h4 id="charAt"><a href="#charAt" class="headerlink" title="charAt"></a>charAt</h4><blockquote>
<p>返回指定位置的字符，参数是从0开始编号</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;dfghjkl&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">charAt</span>(<span class="number">4</span>));<span class="comment">//j</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印出最后一个字符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">charAt</span>(str.<span class="property">length</span>-<span class="number">1</span>));</span><br></pre></td></tr></table></figure>

<p>当参数为负数，或者大于等于字符串的长度，charAt返回空字符串</p>
</blockquote>
<h4 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h4><blockquote>
<p>用于连接两个字符串，返回一个新字符串，不改变原字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str1= <span class="string">&quot;Hell&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> str2= <span class="string">&quot;o&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str1.<span class="title function_">concat</span>(str2));</span><br><span class="line"></span><br><span class="line"><span class="comment">//连接多个字符串</span></span><br><span class="line"><span class="keyword">var</span> str1= <span class="string">&quot;Hell&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> str2= <span class="string">&quot;o&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> str3= <span class="string">&quot;！&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str1.<span class="title function_">concat</span>(str2,str3));</span><br><span class="line"></span><br><span class="line"><span class="comment">//连接数字</span></span><br><span class="line"><span class="keyword">var</span> str1= <span class="string">&quot;Hell&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> str2= <span class="string">&quot;o&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> str3= <span class="string">&quot;！&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> num= <span class="number">100</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str1.<span class="title function_">concat</span>(str2,str3,num));<span class="comment">//Hello!100,这里的数字还是数值型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串相加不需要concat，可以直接使用加号</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="substring"><a href="#substring" class="headerlink" title="substring"></a>substring</h4><blockquote>
<p>概念：从原字符串中取出子字符串并返回，不改变原字符串。它的第一个参数表示子字符串的开始位置，<strong>第二个位置表示结束位置</strong>（返回结果不含该位置）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;abcdefg&#x27;</span>.<span class="title function_">substring</span>(<span class="number">1</span>,<span class="number">3</span>);<span class="comment">//bc</span></span><br></pre></td></tr></table></figure>

<p>如果省略第二个参数，说明打印到字符的最后</p>
<p>如果第一个参数大于第二个参数，会自动更换两个参数的位置</p>
<p>如果第一个参数是负数，那么第一个参数会自动转换成0</p>
</blockquote>
<h4 id="substr"><a href="#substr" class="headerlink" title="substr"></a>substr</h4><blockquote>
<p>概念：从原字符串中取出子字符串并返回，不改变原字符串。它的第一个参数表示子字符串的开始位置，<strong>第二个位置表示字符串的长度</strong></p>
<p>如果省略第二个参数，说明打印到字符的最后</p>
<p>如果第一个参数是负数，表示倒数计算的字符位置，如果第二个参数是负数，将被自动转为0，返回空字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;helloworld&#x27;</span>.<span class="title function_">substr</span>(-<span class="number">1</span>,<span class="number">5</span>);<span class="comment">//world</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h4><blockquote>
<p>概念：用于确定一个字符串在另一个字符串中第一次出现的位置，返回的结果使匹配开始的位置，如果返回-1，表示不匹配</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;helloworld&#x27;</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;e&quot;</span>);<span class="comment">//1</span></span><br></pre></td></tr></table></figure>

<p>接受第二个参数，表示从该位置开始向后匹配</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;thrusday&#x27;</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;u&#x27;</span>,<span class="number">5</span>);<span class="comment">//-1</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h4><blockquote>
<p>用于去除字符串两端的空格，返回一个新字符串，不改变原字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;   itgit  &#x27;</span>.<span class="title function_">trim</span>();<span class="comment">//itgit</span></span><br></pre></td></tr></table></figure>

<p>不止可以去除空格，还可去除制表符（\t，\v）、换行符、回车符（\r）</p>
<p>ES6扩展方法：trimEnd()，trimStart()</p>
</blockquote>
<h4 id="split"><a href="#split" class="headerlink" title="split"></a>split</h4><blockquote>
<p>概念：将字符串按照给定规则分割字符串，返回一个<strong>由分割出来的子字符串组成的数组</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;it|sxt|baizhan|&#x27;</span>.<span class="title function_">split</span>(<span class="string">&#x27;|&#x27;</span>);<span class="comment">//[&quot;it&quot;,&quot;sxt&quot;,&quot;baizhan&quot;]</span></span><br></pre></td></tr></table></figure>

<p>如果分割规则是空字符串，则返回数组的成员是原字符串的每一个字符</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;hello&#x27;</span>.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>如果省略参数。则返回数组的唯一成员，就是原字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;hello&#x27;</span>.<span class="title function_">split</span>();<span class="comment">//[&quot;hello&quot;]</span></span><br></pre></td></tr></table></figure>

<p>可以传入<strong>第二个参数</strong>，就是字符串的长度</p>
</blockquote>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><blockquote>
<p>概念：按次序排列的一组值，每个位置都有编号（从0开始），整个数组用方括号表示</p>
<ul>
<li>通过数组下标进行赋值</li>
<li>任意类型都可以放入数组</li>
<li>数组可以先定义后赋值</li>
<li>可以通过下标读取值</li>
<li>数组越界，返回undefined</li>
</ul>
<p>length属性</p>
</blockquote>
<p>遍历</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> username = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> username)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h3><h4 id="Array-isArray"><a href="#Array-isArray" class="headerlink" title="Array.isArray"></a>Array.isArray</h4><blockquote>
<p>返回一个布尔值，判断一个参数是否是数组，可以弥补typeof的不足</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>]</span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr);<span class="comment">//true</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="push-x2F-pop"><a href="#push-x2F-pop" class="headerlink" title="push&#x2F;pop"></a>push&#x2F;pop</h4><blockquote>
<p>push：在数组的末端添加一个或多个元素，并返回添加新元素后的数组长度。<strong>该方法会改变原数组</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">push</span>(<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;world&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>pop：删除数组的最后一个元素，并返回该元素。<strong>该方法会改变原数组</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">pop</span>()</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="shift-x2F-unshift"><a href="#shift-x2F-unshift" class="headerlink" title="shift&#x2F;unshift"></a>shift&#x2F;unshift</h4><blockquote>
<p><strong>shift：</strong>删除数组的第一个元素，并返回该元素。<strong>该方法会改变原数组</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">name.<span class="title function_">shift</span>();</span><br></pre></td></tr></table></figure>

<ul>
<li>清空数组元素</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[]</span><br><span class="line">arr.<span class="title function_">shift</span>();<span class="comment">//undefined</span></span><br></pre></td></tr></table></figure>

<p>通过while循环的方式，清空数组元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> item;</span><br><span class="line"><span class="keyword">var</span> arr1=[<span class="number">100</span>,<span class="number">200</span>,<span class="number">300</span>];</span><br><span class="line"><span class="keyword">while</span>(item=arr1.<span class="title function_">shift</span>())&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>unshift：</strong>在数组的第一个位置添加元素，并返回添加新元素后的数组长度。<strong>该方法会改变原数组</strong></p>
</blockquote>
<h4 id="join"><a href="#join" class="headerlink" title="join"></a>join</h4><blockquote>
<p>概念：以指定方法作为分隔符，将所有数组成员连接为一个字符串返回。如果不提供参数，默认用逗号分隔</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">a.<span class="title function_">join</span>(<span class="string">&quot;|&quot;</span>);<span class="comment">//a|b|c</span></span><br><span class="line">a.<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);<span class="comment">//abc</span></span><br><span class="line">a.<span class="title function_">join</span>();<span class="comment">//a,b,c</span></span><br></pre></td></tr></table></figure>

<p>如果数组成员是undefined或null或空值，会被转为空字符串。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="literal">null</span>,<span class="literal">undefined</span>]</span><br><span class="line">a.<span class="title function_">join</span>(<span class="string">&quot;|&quot;</span>);<span class="comment">//a|b|c||</span></span><br><span class="line">a.<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);<span class="comment">//abc</span></span><br><span class="line">a.<span class="title function_">join</span>();<span class="comment">//a,b,c,,</span></span><br></pre></td></tr></table></figure>

<p>join匹配split可以实现数组与字符串的互换</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数组变字符串</span></span><br><span class="line"><span class="keyword">var</span> a=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">result=a.<span class="title function_">join</span>(<span class="string">&quot; &quot;</span>)</span><br><span class="line">字符串变数组</span><br><span class="line">result.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="concat-1"><a href="#concat-1" class="headerlink" title="concat"></a>concat</h4><blockquote>
<p>概念：将<strong>多个数组</strong>进行合并，将新数组的成员添加到原数组成员的后部，然后返回一个新数组，<strong>原数组不变。</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> arr1=[<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>];</span><br><span class="line">arr+arr1=a,bc,d<span class="comment">//变成字符串</span></span><br><span class="line">arr.<span class="title function_">concat</span>(arr1);<span class="comment">//[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;]</span></span><br></pre></td></tr></table></figure>

<p>应用场景：上拉加载，合并数据</p>
<p>例题：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].<span class="title function_">concat</span>(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]);<span class="comment">//[1,2,3,4,5,6,7,8,9]</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h4><blockquote>
<p>概念：用于颠倒排列数组元素，返回改变后的数组。<strong>该方法会改变原数组</strong></p>
</blockquote>
<h4 id="indexOf-1"><a href="#indexOf-1" class="headerlink" title="indexOf"></a>indexOf</h4><blockquote>
<p>概念：返回给定元素在数组中第一次出现的位置，返回的结果使匹配开始的位置，如果返回-1，表示不匹配</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">arr.<span class="title function_">indexOf</span>(<span class="number">1</span>);<span class="comment">//0</span></span><br><span class="line">arr.<span class="title function_">indexOf</span>(<span class="number">0</span>);<span class="comment">//-1</span></span><br></pre></td></tr></table></figure>

<p>接受第二个参数，表示从该位置开始向后匹配</p>
</blockquote>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><blockquote>
<p>概念：可以反复调用的代码块</p>
<ul>
<li><p>声明</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">print</span>(<span class="params">s</span>)&#123;</span><br><span class="line">                  </span><br><span class="line">&#125;</span><br><span class="line"><span class="attr">print</span>:函数名</span><br><span class="line">s：传入参数</span><br></pre></td></tr></table></figure>


</li>
<li><p>函数名的提升</p>
<p>先调用后创建</p>
</li>
<li><p>函数参数</p>
</li>
<li><p>函数返回值</p>
</li>
</ul>
</blockquote>
<h2 id="对象-1"><a href="#对象-1" class="headerlink" title="对象"></a>对象</h2><blockquote>
<p>概念：一组”键值对“的集合，是无序的复合数据类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> user=&#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">	<span class="attr">name</span>: <span class="string">&quot;John&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>键 是属性</p>
<p>值可以是任何数据类型，如果是函数，则把这个属性称为方法，可以像函数一样调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> user=&#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">	<span class="attr">getName</span>: <span class="keyword">function</span> (<span class="params">name</span>)&#123;<span class="comment">//函数名字要提前到键的位置</span></span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对象的提取方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">user.<span class="property">name</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数调用</span></span><br><span class="line">user.<span class="title function_">getName</span>();</span><br></pre></td></tr></table></figure>

<p>如果属性的值还是一个对象，就形成了链式引用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> user=&#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">	<span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">    <span class="attr">container</span>: &#123;</span><br><span class="line">        <span class="attr">jobs</span>: [a,b,c],</span><br><span class="line">        <span class="attr">abc</span>: [d,e]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">user.<span class="property">container</span>.<span class="property">jobs</span>;<span class="comment">//这是链式调用</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h2><blockquote>
<p>是js的原生对象，提供各种数学功能</p>
<ul>
<li><p>Math.abs()</p>
<p>返回参数的绝对值</p>
</li>
<li><p>Math.max()</p>
<p>返回参数的最大值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">21</span>,<span class="number">90</span>,<span class="number">11</span>,<span class="number">24</span>,<span class="number">66</span>,<span class="number">89</span>)</span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">max</span>()<span class="comment">//-Infinity</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>Math.min()</p>
<p>返回参数的最小值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">min</span>(<span class="number">21</span>,<span class="number">90</span>,<span class="number">11</span>,<span class="number">24</span>,<span class="number">66</span>,<span class="number">89</span>)</span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">min</span>()<span class="comment">//Infinity</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>Max.floor()</p>
<p>向下取整</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">num1=<span class="number">10.9</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>(num1);<span class="comment">//10</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>Max.ceil()</p>
<p>向上取整</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">num1=<span class="number">10.1</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">ceil</span>(num1);<span class="comment">//11</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>Math.random()</p>
<p>返回从0到1的一个伪随机数，可能等于0，但是一定小于1</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">random</span>()</span><br></pre></td></tr></table></figure>



<p>返回任意范围内的随机数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">get</span>(<span class="params">min,max</span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> res=<span class="title class_">Math</span>.<span class="title function_">random</span>()*(max-min)+min</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</blockquote>
<h2 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a>Date对象</h2><blockquote>
<p>概念：js的原生时间库，以1970年1月1日00：00：00作为时间的零点，可以表示时间范围为前后各一亿年（以毫秒为单位）</p>
</blockquote>
<h3 id="Date-now"><a href="#Date-now" class="headerlink" title="Date.now()"></a>Date.now()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Date</span>.<span class="title function_">now</span>();<span class="comment">//返回时间戳</span></span><br></pre></td></tr></table></figure>



<h3 id="get方法"><a href="#get方法" class="headerlink" title="get方法"></a>get方法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d=<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;January 6,2020&#x27;</span>);</span><br><span class="line">d.<span class="title function_">getTime</span>();<span class="comment">//返回实例距离1970年1月1日00：00：00的毫秒数</span></span><br><span class="line">d.<span class="title function_">getDate</span>();<span class="comment">//返回实例对象对应每个月的几号</span></span><br><span class="line">d.<span class="title function_">getDay</span>();<span class="comment">//返回星期几，星期日为0，星期一为1，以此类推</span></span><br><span class="line">d.<span class="title function_">getYear</span>();<span class="comment">//返回距离1900的年数</span></span><br><span class="line">d.<span class="title function_">getFullYear</span>();<span class="comment">//返回四位的年份</span></span><br><span class="line">d.<span class="title function_">getMonth</span>();<span class="comment">//返回月份，0是1月，11是12月</span></span><br><span class="line">d.<span class="title function_">getHour</span>();<span class="comment">//返回小时，0-23</span></span><br><span class="line">d.<span class="title function_">getMilliseconds</span>();<span class="comment">//返回毫秒 0-999</span></span><br><span class="line">d.<span class="title function_">getMinutes</span>();<span class="comment">//返回分钟 0-59</span></span><br><span class="line">d.<span class="title function_">getSeconds</span>();<span class="comment">//返回秒 0-59</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="title class_">Date</span>.<span class="title function_">now</span>();<span class="comment">//返回时间戳</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>(a);<span class="comment">//new获取的是当前时间</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>();<span class="comment">//当前时间</span></span><br></pre></td></tr></table></figure>



<h3 id="编写函数获得本年度剩余天数"><a href="#编写函数获得本年度剩余天数" class="headerlink" title="编写函数获得本年度剩余天数"></a>编写函数获得本年度剩余天数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">leftDays = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 今天的标准时间</span></span><br><span class="line">        <span class="keyword">let</span> today = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="comment">// 本年最后标准时间</span></span><br><span class="line">        <span class="keyword">let</span> endYear = <span class="keyword">new</span> <span class="title class_">Date</span>(today.<span class="title function_">getFullYear</span>(), <span class="number">11</span>, <span class="number">31</span>, <span class="number">23</span>, <span class="number">59</span>, <span class="number">59</span>);</span><br><span class="line">        <span class="comment">// 一天的毫秒数</span></span><br><span class="line">        <span class="keyword">let</span> msPerDay = <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line">        <span class="comment">// 计算剩余毫秒除以一天的毫秒数，就是天数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">round</span>((endYear.<span class="title function_">getTime</span>() - today.<span class="title function_">getTime</span>()) / msPerDay);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><blockquote>
<p>概念：js操作网页的接口，全称：”文档对象类型“。作用：将网页转换为一个JS对象，从而用脚本进行各种操作（比如对元素增删内容）</p>
<ul>
<li>浏览器会根据DOM模型，将结构化文档HTML解析成一系列的节点，再由这些节点组成一个树状结构（DOM Tree）。所有的节点和最终的树状结构，都有规范的对外接口</li>
<li>DOM只是一个接口规范，可以用各种语言实现。严格地说：DOM不是JS语法的一部分，但DOM操作时JS最常见的任务，离开了DOM，JS就无法控制网页。另一方面，JS也是最常用于DOM操作的语言</li>
</ul>
</blockquote>
<h3 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h3><blockquote>
<p>DOM的最小组成单位叫做节点，文档的树状结构（DOM树），就是由各种不同类型的节点组成。每个节点可以看作文档树的一片叶子。</p>
</blockquote>
<h4 id="类型分类"><a href="#类型分类" class="headerlink" title="类型分类"></a>类型分类</h4><blockquote>
<p>Document：整个文档树的顶层节点</p>
<p>DocumentType：doctype标签</p>
<p>Element：网页的各种HTML标签</p>
<p>Attribute：网页元素的属性</p>
<p>Text：标签之间或标签包含的文本</p>
<p>Comment：注释</p>
<p>DocumentFragment：文档的片段</p>
</blockquote>
<h3 id="节点树"><a href="#节点树" class="headerlink" title="节点树"></a>节点树</h3><p>一个文档的所有节点，按照所在的层级，可以抽象成一种树状结构。这种树状结构就是DOM树。它有一个顶层节点，下一层都是顶层节点的子节点，然后子节点又有自己的子节点，层层衍生。</p>
<p>浏览器原生提供document节点，代表整个文档</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>)</span><br></pre></td></tr></table></figure>

<h4 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h4><blockquote>
<ul>
<li>除了根节点之外，其他节点都有三种层级关系<ul>
<li>父节点关系</li>
<li>子节点关系</li>
<li>同级节点关系</li>
</ul>
</li>
</ul>
</blockquote>
<h3 id="Node-nodeType属性"><a href="#Node-nodeType属性" class="headerlink" title="Node.nodeType属性"></a>Node.nodeType属性</h3><blockquote>
<p>不同节点的nodeType属性值和对应的常量如下：</p>
<p>​	文档节点document：9，对应常量Node.DOCUMENT_NODE</p>
<p>​	元素节点element：1，对应常量Node.ELEMENT_NODE</p>
<p>​	属性节点attr：2，对应常量Node.ATTRIBUTE_NODE</p>
<p>​	文本节点text：3，对应常量Node.TEXT_NODE</p>
<p>​	文档片断节点DucumentFragment：11，对应常量Node.DOCUMENT_FRAGMENT_NODE</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">nodeType</span> <span class="comment">//9</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">nodeType</span> === <span class="title class_">Node</span>.<span class="property">DOCUMENT_NODE</span> <span class="comment">//true</span></span><br></pre></td></tr></table></figure>



<h2 id="document对象-方法-x2F-获取元素"><a href="#document对象-方法-x2F-获取元素" class="headerlink" title="document对象_方法&#x2F;获取元素"></a>document对象_方法&#x2F;获取元素</h2><h3 id="getElementsByTagName"><a href="#getElementsByTagName" class="headerlink" title="getElementsByTagName"></a>getElementsByTagName</h3><blockquote>
<p>搜索HTM标签名，返回符合条件的元素。它的返回值是一个类似数组对象（HTML Collection实例），可以实时反映HTML文档的变化。如果没有任何匹配的元素，就返回一个空集</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> paras = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;p&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> paras = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;div&quot;</span>)[<span class="number">0</span>];<span class="comment">//读取第一个颜色</span></span><br><span class="line">paras.<span class="property">innerHTML</span>=<span class="string">&quot;Hello World&quot;</span>;<span class="comment">//改变元素值</span></span><br></pre></td></tr></table></figure>

<p>如果传入*，就可以返回文档中所有HTML元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> paras = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;*&quot;</span>);</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="getElementsByClassName"><a href="#getElementsByClassName" class="headerlink" title="getElementsByClassName"></a>getElementsByClassName</h3><blockquote>
<p>返回一个类似数组的对象（HTMLCollection实例），包括了所有class名字符合指定条件的元素，元素的变化实时反应在返回结果中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var paras = document.getElementsByClassName(&quot;name&quot;);</span><br></pre></td></tr></table></figure>

<p>参数可以是多个class，它们之间使用空格分隔</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> elements = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;foo bar&quot;</span>);</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="getElementsByName"><a href="#getElementsByName" class="headerlink" title="getElementsByName"></a>getElementsByName</h3><blockquote>
<p>用于选择拥有name属性的HTML元素（比如<form>,<radio>,<img>等），返回一个类似数组的对象（NodeList实例），因为name属性相同的元素可能不止一个</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//表单为&lt;form name=&#x27;abc&#x27;&gt;&lt;/form&gt;</span></span><br><span class="line"><span class="keyword">var</span> forms = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&#x27;abc&#x27;</span>);</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="getElementsById"><a href="#getElementsById" class="headerlink" title="getElementsById"></a>getElementsById</h3><blockquote>
<p>返回匹配指定id属性的元素节点。如果没有匹配的节点，返回null</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> elem = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;foo&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>该方法的参数是大小写敏感的。</p>
</blockquote>
<h3 id="querySelector"><a href="#querySelector" class="headerlink" title="querySelector"></a>querySelector</h3><blockquote>
<p>接受一个CSS选择器作为参数，返回匹配该选择器的元素节点。如果有多个节点满足匹配条件，则返回<strong>第一个匹配</strong>的节点。如果没有匹配的节点，返回null</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> elem = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.nav&quot;</span>);</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="querySelectorAll"><a href="#querySelectorAll" class="headerlink" title="querySelectorAll"></a>querySelectorAll</h3><blockquote>
<p>返回一个NodeList对象，包含所有匹配给定选择器的节点</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> elems = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.nav&quot;</span>);</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="document对象-方法-x2F-创建元素"><a href="#document对象-方法-x2F-创建元素" class="headerlink" title="document对象_方法&#x2F;创建元素"></a>document对象_方法&#x2F;创建元素</h2><h3 id="createElement"><a href="#createElement" class="headerlink" title="createElement"></a>createElement</h3><blockquote>
<p>生成元素节点，并返回该元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> newDiv = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="createTextNode"><a href="#createTextNode" class="headerlink" title="createTextNode"></a>createTextNode</h3><blockquote>
<p>生成文本节点，并返回该节点。它的参数是文本节点的内容</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> newDiv = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> newContent = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&#x27;Hello&#x27;</span>);</span><br><span class="line">newDiv.<span class="title function_">appendChild</span>(newContent);<span class="comment">//将内容或者子元素放入容器中</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="createAttribute"><a href="#createAttribute" class="headerlink" title="createAttribute"></a>createAttribute</h3><blockquote>
<p>生成一个新的属性节点，并返回它</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> attribute = <span class="variable language_">document</span>.<span class="title function_">creaeAttribute</span>(name);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> root = <span class="variable language_">document</span>.<span class="title function_">getElementsById</span>(<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> it = <span class="variable language_">document</span>.<span class="title function_">creaeAttribute</span>(<span class="string">&#x27;abc&#x27;</span>);</span><br><span class="line">it.<span class="property">value</span>=<span class="string">&#x27;it&#x27;</span>;</span><br><span class="line">root.<span class="title function_">setAttributeNode</span>(it);</span><br></pre></td></tr></table></figure>

<p>除了属性用方法creaeAttribute，其他都用appendChild</p>
</blockquote>
<h2 id="Element对象-属性"><a href="#Element对象-属性" class="headerlink" title="Element对象_属性"></a>Element对象_属性</h2><blockquote>
<p>Element对象对应网页的HTML元素，每一个HTML元素，在DOM树上都会转化成一个Element节点对象（以下简称元素节点）</p>
</blockquote>
<h3 id="id"><a href="#id" class="headerlink" title="id"></a>id</h3><blockquote>
<p>返回指定元素的id属性，该属性可读写</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line">p.<span class="property">id</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="className"><a href="#className" class="headerlink" title="className"></a>className</h3><blockquote>
<p>用来读写当前元素节点的class属性，它的值是一个字符串，每个class之间用空格分割</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line">p.<span class="property">className</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="classList"><a href="#classList" class="headerlink" title="classList"></a>classList</h3><h4 id="add"><a href="#add" class="headerlink" title="add"></a>add</h4><blockquote>
<p>增加一个class</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myDiv&#x27;</span>);</span><br><span class="line">div.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;myCssClass&#x27;</span>);</span><br><span class="line">div.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;myCssClass1&#x27;</span>,<span class="string">&#x27;class2&#x27;</span>);</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h4><blockquote>
<p>移除一个class</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">div.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;myCssClass&#x27;</span>);</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="contains"><a href="#contains" class="headerlink" title="contains"></a>contains</h4><blockquote>
<p>检查当前元素是否包含某个class</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">div.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&#x27;myCssClass&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>返回true或false</p>
</blockquote>
<h4 id="toggle"><a href="#toggle" class="headerlink" title="toggle"></a>toggle</h4><blockquote>
<p>将某个class移入或移出当前元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">div.<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&#x27;myCssClass&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>如果myCssClass不存在就加入，否则移除</p>
</blockquote>
<h3 id="innerHTML"><a href="#innerHTML" class="headerlink" title="innerHTML"></a>innerHTML</h3><blockquote>
<p>返回一个字符串，等同于该元素包含的所有HTML代码，该属性可读写，常用来设置某个结点的内容。它能改写所有元素结点的内容，包括<code>&lt;HTML&gt;</code>和<code>&lt;body&gt;</code>元素</p>
<ul>
<li>可以识别标签</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ele.<span class="property">innerHTML</span>;<span class="comment">//读取</span></span><br><span class="line">ele.<span class="property">innerHTML</span>= <span class="string">&quot;&quot;</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="innerText"><a href="#innerText" class="headerlink" title="innerText"></a>innerText</h3><blockquote>
<ul>
<li>会把标签识别成一个字符串</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ele.<span class="property">innerText</span>;<span class="comment">//读取</span></span><br><span class="line">ele.<span class="property">innerText</span>= <span class="string">&quot;&quot;</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="Element获取元素位置"><a href="#Element获取元素位置" class="headerlink" title="Element获取元素位置"></a>Element获取元素位置</h2><p><img src="D:\blog\source_posts\前端三件套.assets\3113f2e37b0b6132bf2b8763fbaefae.jpg" alt="3113f2e37b0b6132bf2b8763fbaefae"></p>
<h3 id="clientHeight，clientWidth"><a href="#clientHeight，clientWidth" class="headerlink" title="clientHeight，clientWidth"></a>clientHeight，clientWidth</h3><blockquote>
<p>返回一个整数值，表示元素节点CSS高度，只对块级元素生效，对于行内元素返回0.</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//视口高度</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//网页总高度</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">clientHeight</span></span><br></pre></td></tr></table></figure>

<h3 id="scrollHeight，scrollWidth"><a href="#scrollHeight，scrollWidth" class="headerlink" title="scrollHeight，scrollWidth"></a>scrollHeight，scrollWidth</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//视口高度</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollHeight</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//网页总高度</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollHeight</span></span><br></pre></td></tr></table></figure>

<h3 id="scrollTop，scrollLeft"><a href="#scrollTop，scrollLeft" class="headerlink" title="scrollTop，scrollLeft"></a>scrollTop，scrollLeft</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//滚动高度</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollLeft</span></span><br></pre></td></tr></table></figure>

<h3 id="offsetHeight，offsetWidth"><a href="#offsetHeight，offsetWidth" class="headerlink" title="offsetHeight，offsetWidth"></a>offsetHeight，offsetWidth</h3><ul>
<li>只读属性</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">box.<span class="property">offsetHeight</span>;<span class="comment">//box是容器</span></span><br><span class="line">box.<span class="property">offsetWidth</span>;</span><br></pre></td></tr></table></figure>



<h2 id="CSS操作"><a href="#CSS操作" class="headerlink" title="CSS操作"></a>CSS操作</h2><blockquote>
<p>操作CSS样式最简单的方法就是使用网页元素节点的setAttribute方法直接操作网页元素的style属性。</p>
</blockquote>
<h3 id="HTML的style属性"><a href="#HTML的style属性" class="headerlink" title="HTML的style属性"></a>HTML的style属性</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box&quot;</span>);</span><br><span class="line">box.<span class="title function_">setAttribute</span>(<span class="string">&#x27;style&#x27;</span>,<span class="string">&#x27;width:200px;height:400px;&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="元素节点的style属性"><a href="#元素节点的style属性" class="headerlink" title="元素节点的style属性"></a>元素节点的style属性</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> divStyle = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>).<span class="property">style</span>;</span><br><span class="line">divStyle.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;red&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="cssText属性"><a href="#cssText属性" class="headerlink" title="cssText属性"></a>cssText属性</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> divStyle = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>).<span class="property">style</span>;</span><br><span class="line">divStyle.<span class="property">style</span>.<span class="property">cssText</span> = <span class="string">&#x27;background-Color:red;&#x27;</span>+<span class="string">&#x27;border : 1px solid black;&#x27;</span>;</span><br></pre></td></tr></table></figure>



<h2 id="事件处理程序"><a href="#事件处理程序" class="headerlink" title="事件处理程序"></a>事件处理程序</h2><h3 id="分类-2"><a href="#分类-2" class="headerlink" title="分类"></a>分类</h3><ul>
<li><p>Html事件处理</p>
</li>
<li><p>DOM0级事件处理</p>
</li>
<li><p>DOM2级事件处理</p>
</li>
</ul>
<h3 id="HTML事件"><a href="#HTML事件" class="headerlink" title="HTML事件"></a>HTML事件</h3><p>缺点：HTML和JS无法分开</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;div&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&#x27;btn1&#x27;</span> <span class="attr">onclick</span>=<span class="string">&quot;demo()&quot;</span>&gt;</span></span><br><span class="line">            按钮</span><br><span class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">demo</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;HTML事件处理&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="DOM0级事件处理"><a href="#DOM0级事件处理" class="headerlink" title="DOM0级事件处理"></a>DOM0级事件处理</h3><p>优点：HTML和JS分离</p>
<p>缺点：无法同时添加多个事件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;div&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&#x27;btn1&#x27;</span>&gt;</span></span><br><span class="line">            按钮</span><br><span class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn1=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        btn1.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;DOM0级事件处理1&quot;</span>)<span class="comment">//被覆盖掉</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        btn1.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;DOM0级事件处理2&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="DOM2级事件处理"><a href="#DOM2级事件处理" class="headerlink" title="DOM2级事件处理"></a>DOM2级事件处理</h3><p>优点：可以添加多个事件</p>
<p>缺点：写法复杂</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;div&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&#x27;btn1&#x27;</span>&gt;</span></span><br><span class="line">            按钮</span><br><span class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn1=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        btn1.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;DOM0级事件处理1&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        btn1.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;DOM0级事件处理2&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h2><h3 id="分类-3"><a href="#分类-3" class="headerlink" title="分类"></a>分类</h3><ul>
<li>click</li>
<li>dblclick 双击</li>
<li>mousedown 按下鼠标键</li>
<li>mouseup 释放按下的鼠标键</li>
<li>mousemove 鼠标在节点内部移动，持续移动</li>
<li>mouseenter 进入一个节点时触发，进入子节点不会触发</li>
<li>mouseleave 离开一个节点时触发，离开父节点不会触发</li>
<li>mouseover 进入一个节点时触发，进入子节点会再一次触发</li>
<li>mouseout 离开一个节点时触发，离开父节点会再次触发</li>
<li>wheel 滚动鼠标的滚轮时触发</li>
</ul>
<h3 id="单击-x2F-双击事件"><a href="#单击-x2F-双击事件" class="headerlink" title="单击&#x2F;双击事件"></a>单击&#x2F;双击事件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;div&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&#x27;btn1&#x27;</span>&gt;</span></span><br><span class="line">            按钮</span><br><span class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&#x27;btn2&#x27;</span>&gt;</span></span><br><span class="line">            按钮</span><br><span class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn1=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn2=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn2&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        btn1.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;单击事件&quot;</span>)<span class="comment">//被覆盖掉</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        btn2.<span class="property">ondblclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;双击事件&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="鼠标按下-x2F-鼠标抬起"><a href="#鼠标按下-x2F-鼠标抬起" class="headerlink" title="鼠标按下&#x2F;鼠标抬起"></a>鼠标按下&#x2F;鼠标抬起</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;div&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&#x27;btn1&#x27;</span>&gt;</span></span><br><span class="line">            按钮</span><br><span class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&#x27;btn2&#x27;</span>&gt;</span></span><br><span class="line">            按钮</span><br><span class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn1=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn2=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn2&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        btn1.<span class="property">onmousedown</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;鼠标按下&quot;</span>)<span class="comment">//被覆盖掉</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        btn2.<span class="property">onmouseup</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;鼠标抬起&quot;</span>)<span class="comment">//被覆盖掉</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="鼠标滑动"><a href="#鼠标滑动" class="headerlink" title="鼠标滑动"></a>鼠标滑动</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        btn.<span class="property">onmousemove</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;鼠标移动了&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="鼠标进入-x2F-鼠标离开"><a href="#鼠标进入-x2F-鼠标离开" class="headerlink" title="鼠标进入&#x2F;鼠标离开"></a>鼠标进入&#x2F;鼠标离开</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;btn2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        btn1.<span class="property">onmouseenter</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;鼠标进入了&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        btn2.<span class="property">onmouseleave</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;鼠标离开了&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="鼠标进入-x2F-鼠标离开（再次）"><a href="#鼠标进入-x2F-鼠标离开（再次）" class="headerlink" title="鼠标进入&#x2F;鼠标离开（再次）"></a>鼠标进入&#x2F;鼠标离开（再次）</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;btn2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        btn1.<span class="property">onmouseover</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;鼠标进入了&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        btn2.<span class="property">onmouseout</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;鼠标离开了&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="Event事件对象"><a href="#Event事件对象" class="headerlink" title="Event事件对象"></a>Event事件对象</h2><blockquote>
<p>事件发生以后，会产生一个事件对象，作为参数传给监听函数</p>
</blockquote>
<p>对象属性：Target type</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn1=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        btn1.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params">event</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(event);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="Target属性"><a href="#Target属性" class="headerlink" title="Target属性"></a>Target属性</h3><blockquote>
<p>返回事件当前所在的节点，点击谁就返回谁</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn1=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        btn1.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params">event</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>);</span></span><br><span class="line"><span class="language-javascript">            event.<span class="property">target</span>.<span class="property">innerHTML</span>= <span class="string">&quot;点击之后&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="Type属性"><a href="#Type属性" class="headerlink" title="Type属性"></a>Type属性</h3><blockquote>
<p>返回一个字符串，表示事件类型。事件的类型是在生成事件的时候。该属性<strong>只读</strong></p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn1=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        btn1.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params">event</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">type</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="preventDefault方法"><a href="#preventDefault方法" class="headerlink" title="preventDefault方法"></a>preventDefault方法</h3><blockquote>
<p>取消浏览器对当前事件的默认行为</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">btn1.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>();<span class="comment">//阻止默认事件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="stopPropagation方法"><a href="#stopPropagation方法" class="headerlink" title="stopPropagation方法"></a>stopPropagation方法</h3><blockquote>
<p>阻止事件在DOM中继续传播，防止再触发定义在别的节点上的监听函数，但是不包括在当前节点上其他的事件监听函数</p>
<p>事件冒泡：点击子元素时，父元素也被点击</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">btn1.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    e.<span class="title function_">stopPropagation</span>();<span class="comment">//阻止事件冒泡</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h2><h3 id="keydown"><a href="#keydown" class="headerlink" title="keydown"></a>keydown</h3><p>按下键盘时触发</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">username.<span class="property">onkeydown</span>=<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;keydown事件&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="keypress"><a href="#keypress" class="headerlink" title="keypress"></a>keypress</h3><p>按下有值的键时触发，即按下Ctrl，Alt，Shift，Meta这样无值的键，这个事件不会触发。对于有值的键，按下时先触发keydown事件，再触发这个事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">username.<span class="property">onkeypress</span>=<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;keypress事件&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="keyup"><a href="#keyup" class="headerlink" title="keyup"></a>keyup</h3><p>松开键盘时触发事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">username.<span class="property">onkeyup</span>=<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;keyup事件&quot;</span>);</span><br><span class="line">    e.<span class="property">target</span>.<span class="property">value</span>;<span class="comment">//输入框的数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="keycode"><a href="#keycode" class="headerlink" title="keycode"></a>keycode</h3><p>唯一标识</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">username.<span class="property">onkeydown</span>=<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(e.<span class="property">keycode</span> === <span class="number">13</span>)&#123;</span><br><span class="line">    	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;回车&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="表单事件"><a href="#表单事件" class="headerlink" title="表单事件"></a>表单事件</h2><h3 id="input"><a href="#input" class="headerlink" title="input"></a>input</h3><blockquote>
<p>当<input>,<select>,<textarea>的值发生变化时触发，对于复选框，单选框，用户改变选项时，也会触发。会连续触发</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">username.<span class="property">oninput</span>=<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><blockquote>
<p>当在<input>,<textarea>里面选中文本时触发</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//&lt;input id=&quot;test&quot; type=&quot;text&quot; value=&quot;select me&quot;&gt;</span></span><br><span class="line"><span class="keyword">var</span> elem = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line">elem.<span class="title function_">addEventListener</span>(<span class="string">&#x27;select&#x27;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">type</span>);</span><br><span class="line">&#125;,<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">username.<span class="property">onselect</span>=<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;选中了&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="change"><a href="#change" class="headerlink" title="change"></a>change</h3><blockquote>
<p>当<input>,<select>,<textarea>的值发生变化时触发，不会连续触发，只有全部修改完成时才会触发</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> elem = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line"><span class="comment">//失去焦点和回车时触发</span></span><br><span class="line">elem.<span class="property">onchange</span>=<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="reset"><a href="#reset" class="headerlink" title="reset"></a>reset</h3><blockquote>
<p>发生在表单对象form上，而不是表单的成员</p>
<p>将表单重置时触发</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;a&quot;</span> <span class="attr">onsubmit</span>=<span class="string">&quot;submitHandle&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span> = <span class="string">&quot;resetHandle&quot;</span>&gt;</span></span><br><span class="line">        重置数据</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;a&quot;</span>)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">resetHandle</span>(<span class="params"></span>)&#123;</span><br><span class="line">    a.<span class="title function_">reset</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="submit"><a href="#submit" class="headerlink" title="submit"></a>submit</h3><blockquote>
<p>发生在表单对象form上，而不是表单的成员</p>
<p>将表单数据向服务器提交时触发</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;a&quot;</span> <span class="attr">onsubmit</span>=<span class="string">&quot;submitHandle&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span> = <span class="string">&quot;resetHandle&quot;</span>&gt;</span></span><br><span class="line">        重置数据</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;a&quot;</span>)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">submitHandle</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;提交&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="事件代理（事件委托）"><a href="#事件代理（事件委托）" class="headerlink" title="事件代理（事件委托）"></a>事件代理（事件委托）</h2><blockquote>
<p>事件会在冒泡阶段向上传播到父节点，因此可以把子节点的监听函数定义在父节点上，由父节点的监听函数统一处理多个子元素的事件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="variable language_">document</span>.<span class="title function_">getElementyId</span>(<span class="string">&quot;list&quot;</span>);</span><br><span class="line">list.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(e.<span class="property">target</span>.<span class="property">tagName</span> == <span class="string">&quot;LI&quot;</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;点击了LI标签&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">innerHTMLs</span>)；</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//小写</span></span><br><span class="line">    <span class="keyword">if</span>(e.<span class="property">target</span>.<span class="property">tagName</span>.<span class="property">toLowerCase</span> == <span class="string">&quot;li&quot;</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;点击了li标签&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">innerHTMLs</span>)；</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><blockquote>
<p>js提供定时执行代码的功能，叫做定时器。有setTimeout和setInterval这两个函数，它们向任务队列添加定时任务</p>
</blockquote>
<h3 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout"></a>setTimeout</h3><blockquote>
<p>指定某个函数或者某段代码在多少毫秒之后执行。返回一个整数，表示定时器的编号，以后可以取消这个定时器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//语法 var timeId = setTimeout(func|code ,delay);</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;定时器&quot;</span>)</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>如果回调函数是对象的方法，那么setTimeout使得方法内部的this关键字指向全局环境，而不是定义时那个对象</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name= adc</span><br><span class="line"><span class="keyword">var</span> user = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;abc&quot;</span>,</span><br><span class="line">    <span class="attr">getName</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)<span class="comment">//这里的this指向adc（全局变量）</span></span><br><span class="line">		&#125;,<span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">user.<span class="title function_">getName</span>();<span class="comment">//adc</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//解决方案</span></span><br><span class="line"><span class="keyword">var</span> name= adc</span><br><span class="line"><span class="keyword">var</span> user = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;abc&quot;</span>,</span><br><span class="line">    <span class="attr">getName</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> that=<span class="variable language_">this</span>;<span class="comment">//这里的this指向getName</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    		<span class="variable language_">console</span>.<span class="title function_">log</span>(that.<span class="property">name</span>)</span><br><span class="line">		&#125;,<span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">user.<span class="title function_">getName</span>();<span class="comment">//abc</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="取消定时器"><a href="#取消定时器" class="headerlink" title="取消定时器"></a>取消定时器</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;定时器&quot;</span>)</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line"><span class="comment">//取消</span></span><br><span class="line"><span class="built_in">clearTimeout</span>(timer);</span><br></pre></td></tr></table></figure>



<h3 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval"></a>setInterval</h3><blockquote>
<p>每间隔一段时间执行一次</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> timer = <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    i++;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="取消定时器-1"><a href="#取消定时器-1" class="headerlink" title="取消定时器"></a>取消定时器</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> timer = <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    i++;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line"><span class="comment">//取消</span></span><br><span class="line"><span class="built_in">clearInterval</span>(timer);</span><br></pre></td></tr></table></figure>



<h2 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h2><blockquote>
<p>属于性能优化，遇到的频率较高，处理不当会引起浏览器卡死</p>
</blockquote>
<h3 id="滚动条监听"><a href="#滚动条监听" class="headerlink" title="滚动条监听"></a>滚动条监听</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">showTop</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> scrollTop = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;滚动条位置&quot;</span>+ scrollTop);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">pnscroll</span> = showTop<span class="comment">//监听滚动事件</span></span><br></pre></td></tr></table></figure>

<p>缺点：执行频率太高</p>
<p>解决方案：短时间内大量触发同一事件，只会执行一次函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn,delay</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">funtion</span>(<span class="params"></span>)&#123;<span class="comment">//闭包</span></span><br><span class="line">        <span class="keyword">if</span>(timer)&#123;</span><br><span class="line">            <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">        &#125;</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(fn,delay);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h2><blockquote>
<p>属于性能优化，遇到的频率较高，处理不当会引起浏览器卡死</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn,delay</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> valid = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!valid)&#123;</span><br><span class="line">            reuturn <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        valid=<span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="title function_">fn</span>();</span><br><span class="line">            valid=<span class="literal">true</span>;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">pnscroll</span> = <span class="title function_">throttle</span>(fn,delay)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showTop</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> scrollTop = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;滚动条位置&quot;</span>+ scrollTop);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">pnscroll</span> = showTop<span class="comment">//监听滚动事件</span></span><br></pre></td></tr></table></figure>



<h2 id="防抖-x2F-节流开发使用场景"><a href="#防抖-x2F-节流开发使用场景" class="headerlink" title="防抖&#x2F;节流开发使用场景"></a>防抖&#x2F;节流开发使用场景</h2><ul>
<li>搜索框input事件，实时搜索时可以使用节流方案</li>
<li>页面resize事件，一般使用防抖方案</li>
</ul>
<h2 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h2><ul>
<li>cmd</li>
<li>PowerShell</li>
</ul>
<h3 id="命令行快捷键"><a href="#命令行快捷键" class="headerlink" title="命令行快捷键"></a>命令行快捷键</h3><p>快速补全目录或文件夹名称：tab</p>
<p>返回上一级目录： cd ..&#x2F;</p>
<h3 id="PowerShell快捷键"><a href="#PowerShell快捷键" class="headerlink" title="PowerShell快捷键"></a>PowerShell快捷键</h3><p>按住shift+右键，点击在此处打开PowerShell窗口</p>
<h1 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h1><h2 id="let命令"><a href="#let命令" class="headerlink" title="let命令"></a>let命令</h2><blockquote>
<p>声明变量，但是所声明的变量只在let命令所在的代码块内有效</p>
</blockquote>
<h3 id="let块级作用域（花括号级作用域）"><a href="#let块级作用域（花括号级作用域）" class="headerlink" title="let块级作用域（花括号级作用域）"></a>let块级作用域（花括号级作用域）</h3><ul>
<li>适合for循环</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i);<span class="comment">//10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i);<span class="comment">//报错</span></span><br></pre></td></tr></table></figure>

<h3 id="不存在变量提升"><a href="#不存在变量提升" class="headerlink" title="不存在变量提升"></a>不存在变量提升</h3><h3 id="不能重复声明"><a href="#不能重复声明" class="headerlink" title="不能重复声明"></a>不能重复声明</h3><h2 id="const命令"><a href="#const命令" class="headerlink" title="const命令"></a>const命令</h2><blockquote>
<p>只读常量，一旦声明，不可改变</p>
<p>一旦声明，必须初始化</p>
<p>作用域：块级级别</p>
<p>不存在变量提升</p>
<p>不可重复声明</p>
<p>&#x2F;&#x2F;name浏览器可能默认赋值</p>
</blockquote>
<h2 id="对象解构赋值"><a href="#对象解构赋值" class="headerlink" title="对象解构赋值"></a>对象解构赋值</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> user&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;abc&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;name,age&#125; = user;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name,age);</span><br></pre></td></tr></table></figure>

<p>对象的属性没有次序，变量必须与属性同名，才能取到正确的值。</p>
<p>对象的解构赋值可以方便地将现有对象的方法，赋值到某个变量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;log&#125; = <span class="variable language_">console</span>;</span><br><span class="line"><span class="title function_">log</span>(name,age);</span><br></pre></td></tr></table></figure>



<h2 id="字符串扩展"><a href="#字符串扩展" class="headerlink" title="字符串扩展"></a>字符串扩展</h2><h3 id="Unicode表示法"><a href="#Unicode表示法" class="headerlink" title="Unicode表示法"></a>Unicode表示法</h3><p>\uxxxx：表示一个字符</p>
<h3 id="字符串遍历器接口"><a href="#字符串遍历器接口" class="headerlink" title="字符串遍历器接口"></a>字符串遍历器接口</h3><h4 id="for…of循环"><a href="#for…of循环" class="headerlink" title="for…of循环"></a>for…of循环</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> <span class="string">&quot;abcdefg&quot;</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><p>增强版字符串，用&#96;标识。可当作普通字符串使用，也可定义<strong>多行</strong>字符串，或在从字符串中嵌入常量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> url=<span class="string">&quot;abcdefg&quot;</span></span><br><span class="line"><span class="keyword">let</span> h1=<span class="string">&quot;&lt;a href=&quot;</span>+url+<span class="string">&quot;djjcm&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> h2=<span class="string">`&lt;a href=`</span>$&#123;url&#125;<span class="string">`djjcm`</span>;</span><br></pre></td></tr></table></figure>



<h3 id="字符串新增方法"><a href="#字符串新增方法" class="headerlink" title="字符串新增方法"></a>字符串新增方法</h3><blockquote>
<p>前三个方法都支持第二个参数，表示从哪个位置开始查询</p>
</blockquote>
<h4 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h4><p>返回布尔值，表示是否找到了参数字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">&#x27;Hello world&#x27;</span></span><br><span class="line"></span><br><span class="line">s.<span class="title function_">includes</span>(<span class="string">&#x27;o&#x27;</span>)<span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h4 id="startsWith"><a href="#startsWith" class="headerlink" title="startsWith"></a>startsWith</h4><p>返回布尔值，表示参数字符串是否在原字符串的头部</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">s.<span class="title function_">startsWith</span>(<span class="string">&#x27;Hello&#x27;</span>)<span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h4 id="endsWith"><a href="#endsWith" class="headerlink" title="endsWith"></a>endsWith</h4><p>返回布尔值，表示参数字符串是否在原字符串的尾部</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">s.<span class="title function_">endWith</span>(<span class="string">&#x27;d&#x27;</span>)<span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h4 id="repeat"><a href="#repeat" class="headerlink" title="repeat"></a>repeat</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">x.<span class="title function_">repeat</span>(<span class="number">3</span>)<span class="comment">//xxx</span></span><br></pre></td></tr></table></figure>

<h4 id="padStart"><a href="#padStart" class="headerlink" title="padStart"></a>padStart</h4><p>如果长度不够，在头部自动补全</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;x&#x27;</span>.<span class="title function_">padStart</span>(<span class="number">5</span>,<span class="string">&#x27;ab&#x27;</span>);<span class="comment">//&#x27;ababx&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="padEnd"><a href="#padEnd" class="headerlink" title="padEnd"></a>padEnd</h4><p>如果长度不够，在尾部自动补全</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;x&#x27;</span>.<span class="title function_">padEnd</span>(<span class="number">4</span>,<span class="string">&#x27;ab&#x27;</span>);<span class="comment">//&#x27;xaba&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="trimStart"><a href="#trimStart" class="headerlink" title="trimStart"></a>trimStart</h4><p>消除字符串头部空格，返回新字符串，不改变原字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">s=<span class="string">&#x27;   angkfjhgb   &#x27;</span></span><br><span class="line">s.<span class="title function_">trimStart</span>()</span><br></pre></td></tr></table></figure>

<h4 id="trimEnd"><a href="#trimEnd" class="headerlink" title="trimEnd"></a>trimEnd</h4><p>消除字符串尾部空格，返回新字符串，不改变原字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">s=<span class="string">&#x27;   angkfjhgb   &#x27;</span></span><br><span class="line">s.<span class="title function_">trimEnd</span>()</span><br></pre></td></tr></table></figure>

<h4 id="at"><a href="#at" class="headerlink" title="at"></a>at</h4><p>接受一个整数作为参数，返回参数指定位置的字符，支持负索引（倒数的位置）。如果超出范围，返回undefined</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str= <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">str.<span class="title function_">at</span>(<span class="number">1</span>);<span class="comment">//e</span></span><br><span class="line">str.<span class="title function_">at</span>(-<span class="number">1</span>);<span class="comment">//o</span></span><br></pre></td></tr></table></figure>



<h2 id="数组扩展"><a href="#数组扩展" class="headerlink" title="数组扩展"></a>数组扩展</h2><h3 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h3><p>是…，将一个数组转为用逗号分隔的参数序列</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(...[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);<span class="comment">//1,2,3</span></span><br><span class="line">arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(...arr);<span class="comment">//1,2,3</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>,...[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],<span class="number">5</span>);<span class="comment">//1,2,3,4,5</span></span><br></pre></td></tr></table></figure>



<h4 id="替代函数的apply"><a href="#替代函数的apply" class="headerlink" title="替代函数的apply"></a>替代函数的apply</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//求数组最大值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="literal">null</span>,arr))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(...arr))</span><br></pre></td></tr></table></figure>



<h4 id="合并数组"><a href="#合并数组" class="headerlink" title="合并数组"></a>合并数组</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">arr1=[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...arr,...arr1])</span><br></pre></td></tr></table></figure>



<h3 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from"></a>Array.from</h3><blockquote>
<p>将类数组转为真正的数组</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">add</span>(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>)&#123;</span><br><span class="line">    consoe.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);<span class="comment">//10,20,30</span></span><br><span class="line">    <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="variable language_">arguments</span>);<span class="comment">//[10,20,30]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="类数组分类"><a href="#类数组分类" class="headerlink" title="类数组分类"></a>类数组分类</h4><h5 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h5><p>可以通过数组下标来访问，只能使用数组的读取方法和length属性，不能使用数组的方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">add</span>(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>)&#123;</span><br><span class="line">    consoe.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);<span class="comment">//10,20,30</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="元素集合"><a href="#元素集合" class="headerlink" title="元素集合"></a>元素集合</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> titles=<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;h3&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(titles)</span><br></pre></td></tr></table></figure>

<h5 id="类似数组的对象"><a href="#类似数组的对象" class="headerlink" title="类似数组的对象"></a>类似数组的对象</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> user = &#123;</span><br><span class="line">    <span class="string">&#x27;0&#x27;</span>: <span class="string">&#x27;abc&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span>:<span class="number">23</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of"></a>Array.of</h3><p>将一组值转为数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">of</span>(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>);<span class="comment">//[10,20,30]</span></span><br></pre></td></tr></table></figure>



<h3 id="创建数组空间"><a href="#创建数组空间" class="headerlink" title="创建数组空间"></a>创建数组空间</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>(<span class="number">3</span>);</span><br></pre></td></tr></table></figure>



<h2 id="对象扩展"><a href="#对象扩展" class="headerlink" title="对象扩展"></a>对象扩展</h2><h3 id="属性的简洁表示法"><a href="#属性的简洁表示法" class="headerlink" title="属性的简洁表示法"></a>属性的简洁表示法</h3><p>允许在大括号里面直接写入变量和函数，作为对象的属性和方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name=<span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="keyword">var</span> user=&#123;</span><br><span class="line">    name,<span class="comment">//同名可省略</span></span><br><span class="line">    <span class="attr">age</span>:<span class="number">20</span>,</span><br><span class="line">    <span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="property">name</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">abc</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> y = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;x,y&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">abc</span>().<span class="property">x</span>,<span class="title function_">abc</span>().<span class="property">y</span>);</span><br></pre></td></tr></table></figure>



<h3 id="属性名表达式"><a href="#属性名表达式" class="headerlink" title="属性名表达式"></a>属性名表达式</h3><p>用表达式作为对象的属性名</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> propkey = <span class="string">&#x27;ggyhugyftd&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    [propkey]: <span class="literal">true</span>,</span><br><span class="line">    [<span class="string">&#x27;a&#x27;</span>+<span class="string">&#x27;bc&#x27;</span>]: <span class="number">123</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="对象的扩展运算符"><a href="#对象的扩展运算符" class="headerlink" title="对象的扩展运算符"></a>对象的扩展运算符</h3><p>将运算符引入对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> z = &#123;<span class="attr">a</span>:<span class="number">10</span>,<span class="attr">b</span>:<span class="number">20</span>&#125;</span><br><span class="line"><span class="keyword">var</span> n = &#123;...z&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n)</span><br></pre></td></tr></table></figure>



<h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p>允许用箭头声明函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="keyword">var</span> fn2 = <span class="keyword">function</span>(<span class="params">x,y</span>)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">fn3</span> = (<span class="params">x,y</span>) =&gt; x+y</span><br></pre></td></tr></table></figure>

<p>大括号被解释成代码块，如果箭头函数直接返回一个对象，必须在对象外面加上括号，否则会报错</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt;(&#123;<span class="attr">x</span>:<span class="number">10</span>,<span class="attr">y</span>:<span class="number">20</span>&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>简化回调函数（匿名函数）</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>]</span><br><span class="line">arr.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>对于普通函数来说，内部的this指向函数运行时所在的对象，对箭头函数不成立。它没有自己的this对象，内部的this就是定义时上层作用域中的this</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name=<span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="keyword">var</span> user=&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;def&quot;</span></span><br><span class="line">    <span class="attr">age</span>:<span class="number">20</span>,</span><br><span class="line">    <span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);<span class="comment">//def</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name=<span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="keyword">var</span> user=&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;def&quot;</span></span><br><span class="line">    <span class="attr">age</span>:<span class="number">20</span>,</span><br><span class="line">    <span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);<span class="comment">//abc</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name=<span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="keyword">var</span> user=&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;def&quot;</span></span><br><span class="line">    <span class="attr">age</span>:<span class="number">20</span>,</span><br><span class="line">    <span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);<span class="comment">//def</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Set数据结构"><a href="#Set数据结构" class="headerlink" title="Set数据结构"></a>Set数据结构</h2><p>类似于数组的，但是成员的值都是唯一的，<strong>没有重复的值</strong></p>
<p>set构造函数</p>
<p>通过add方法添加成员</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">[<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">3</span>].<span class="title function_">forEach</span>(<span class="function"><span class="params">x</span>=&gt;</span>s.<span class="title function_">add</span>(x))</span><br></pre></td></tr></table></figure>

<p>可以接收数组作为参数</p>
<p>可作为数组去重的方法</p>
<h3 id="set-x2F-数组互相转换"><a href="#set-x2F-数组互相转换" class="headerlink" title="set&#x2F;数组互相转换"></a>set&#x2F;数组互相转换</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">3</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...s])</span><br></pre></td></tr></table></figure>



<h3 id="字符串去重"><a href="#字符串去重" class="headerlink" title="字符串去重"></a>字符串去重</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[...<span class="keyword">new</span> <span class="title class_">Set</span>(<span class="string">&#x27;agdhjhhk&#x27;</span>)].<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>



<p>向set加入值的时候，不会发生类型转换，所以5和“5”不是相同的值</p>
<h3 id="size属性"><a href="#size属性" class="headerlink" title="size属性"></a>size属性</h3><p>返回实例成员的总数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">s = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">3</span>]);</span><br><span class="line">s.<span class="property">size</span>;</span><br></pre></td></tr></table></figure>



<h3 id="add方法"><a href="#add方法" class="headerlink" title="add方法"></a>add方法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">s = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">3</span>]);</span><br><span class="line">s.<span class="title function_">add</span>(<span class="number">5</span>);</span><br></pre></td></tr></table></figure>



<h3 id="delete方法"><a href="#delete方法" class="headerlink" title="delete方法"></a>delete方法</h3><p>返回一个布尔值，表示删除是否</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">s = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">3</span>]);</span><br><span class="line">s.<span class="title function_">add</span>(<span class="number">5</span>);</span><br><span class="line">s.<span class="title function_">delete</span>(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>



<h3 id="has方法"><a href="#has方法" class="headerlink" title="has方法"></a>has方法</h3><p>返回布尔值，表示是否是成员</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">s = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">3</span>]);</span><br><span class="line">s.<span class="title function_">has</span>(<span class="number">5</span>);</span><br></pre></td></tr></table></figure>



<h3 id="clear方法"><a href="#clear方法" class="headerlink" title="clear方法"></a>clear方法</h3><p>清除所有成员，没有返回值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">s = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">3</span>]);</span><br><span class="line">s.<span class="title function_">clear</span>()</span><br></pre></td></tr></table></figure>



<h2 id="Promise对象"><a href="#Promise对象" class="headerlink" title="Promise对象"></a>Promise对象</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>异步编程中一种解决方案。Promise就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，promise是一个对象，可以获取异步操作的消息。提供统一API，各种异步操作都可以用同样的方法进行处理</p>
<h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>))&#123;</span><br><span class="line">  <span class="comment">//异步处理</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="comment">/*成功*/</span>)&#123;</span><br><span class="line">    <span class="title function_">resolve</span>(value);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_">reject</span>(error);</span><br><span class="line">&#125;</span><br><span class="line">	<span class="keyword">return</span> promise;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">promise.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="comment">//success</span></span><br><span class="line">&#125;,<span class="keyword">function</span>(<span class="params">error</span>)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h3 id="Ajax实操"><a href="#Ajax实操" class="headerlink" title="Ajax实操"></a>Ajax实操</h3><p>promise封装ajax，让异步请求的异常操作变得更简单</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getJSON = <span class="keyword">function</span>(<span class="params">url</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line">        <span class="comment">//异步操作</span></span><br><span class="line">        <span class="keyword">const</span> handler = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        	<span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">readyState</span> !==<span class="number">4</span>)&#123;</span><br><span class="line">            	<span class="keyword">return</span> ;</span><br><span class="line">        	&#125;</span><br><span class="line">        	<span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">readyState</span> ===<span class="number">200</span>)&#123;</span><br><span class="line">            	<span class="title function_">resolve</span>(<span class="variable language_">this</span>.<span class="property">response</span>);</span><br><span class="line">        	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="variable language_">this</span>.<span class="property">statusText</span>))</span><br><span class="line">			&#125;</span><br><span class="line">    	&#125;</span><br><span class="line">        <span class="keyword">const</span> client = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    	client.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,url);</span><br><span class="line">    	client.<span class="property">onreadystatechange</span> = handler <span class="comment">//接受前后端交互的状态</span></span><br><span class="line">    	client.<span class="property">responseType</span>= <span class="string">&quot;json&quot;</span>;</span><br><span class="line">    	client.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Accept&quot;</span>,<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">    	client.<span class="title function_">send</span>();</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> promise;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">getJSON</span>(<span class="string">&quot;http://xx.php&quot;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">    &#125;,<span class="keyword">function</span>(<span class="params">error</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Async函数"><a href="#Async函数" class="headerlink" title="Async函数"></a>Async函数</h2><p>可以将异步操作变为同步操作</p>
<p>定时器是异步的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">print</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;定时器&quot;</span>);</span><br><span class="line">    &#125;,<span class="number">10</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">print</span>();<span class="comment">//先输出hello再输出定时器</span></span><br></pre></td></tr></table></figure>

<p>解决方案</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">timeout</span>(<span class="params">ms</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;定时器&quot;</span>);</span><br><span class="line">        	<span class="title function_">resolve</span>();</span><br><span class="line">            ),ms)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">asyncPrint</span>(<span class="params">ms,value</span>)&#123;</span><br><span class="line">    <span class="comment">//把具有异步操作的代码钱买你放入await</span></span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">timeout</span>(ms);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">asyncPrint</span>(<span class="number">100</span>,<span class="string">&quot;hello&quot;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="class类"><a href="#class类" class="headerlink" title="class类"></a>class类</h2><h3 id="ES5"><a href="#ES5" class="headerlink" title="ES5"></a>ES5</h3><h4 id="ES5的类像函数可以提升"><a href="#ES5的类像函数可以提升" class="headerlink" title="ES5的类像函数可以提升"></a>ES5的类像函数可以提升</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Point</span>(<span class="params">x,y</span>)&#123;<span class="comment">//首字母大写说明它是类，小写说明它是函数</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">x</span>=x;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">y</span>=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Point</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getx</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="comment">//增加方法</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Point</span>(<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">p.<span class="title function_">getx</span>();</span><br></pre></td></tr></table></figure>



<h3 id="ES6-1"><a href="#ES6-1" class="headerlink" title="ES6"></a>ES6</h3><h4 id="ES6的类不存在提升"><a href="#ES6的类不存在提升" class="headerlink" title="ES6的类不存在提升"></a>ES6的类不存在提升</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">x,y</span>)&#123;<span class="comment">//构造函数传参</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">x</span>=x;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">y</span>=y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">getx</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Point</span>(<span class="number">3</span>,<span class="number">4</span>);<span class="comment">//实例对象</span></span><br><span class="line">p.<span class="title function_">getx</span>();</span><br></pre></td></tr></table></figure>



<h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><p>类相当于实例的原型，所有在类中定义的方法，都会被实例继承。如果在一个方法前加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Point&#123;</span><br><span class="line">    static getx()&#123;</span><br><span class="line">        console.log(&quot;&quot;);</span><br><span class="line">        //this指的是类Point</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Point.getx()</span><br></pre></td></tr></table></figure>



<h2 id="Module语法"><a href="#Module语法" class="headerlink" title="Module语法"></a>Module语法</h2><p>export输出代码</p>
<p>import输入代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> <span class="title class_">Hello</span> = <span class="string">&quot;hello&quot;</span><span class="comment">//hello.js文件</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Hello</span>&#125; <span class="keyword">from</span> <span class="string">&quot;./hello.js&quot;</span><span class="comment">//index.js文件</span></span><br></pre></td></tr></table></figure>



<h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>项目路径下安装：npm install -D babel-preset-env</p>
<p>运行代码：babel-node –presets env index.js(要运行的文件)</p>
<h3 id="export"><a href="#export" class="headerlink" title="export"></a>export</h3><h4 id="导出变量"><a href="#导出变量" class="headerlink" title="导出变量"></a>导出变量</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> year=<span class="number">2000</span></span><br></pre></td></tr></table></figure>



<h4 id="导出函数"><a href="#导出函数" class="headerlink" title="导出函数"></a>导出函数</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x,y</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> (x,y);  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><h4 id="导入变量"><a href="#导入变量" class="headerlink" title="导入变量"></a>导入变量</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;a,b,c&#125; <span class="keyword">from</span> <span class="string">&#x27;./xxx.js&#x27;</span></span><br></pre></td></tr></table></figure>



<h4 id="导入函数"><a href="#导入函数" class="headerlink" title="导入函数"></a>导入函数</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;value <span class="keyword">as</span> val&#125; <span class="keyword">from</span> <span class="string">&#x27;./xxx.js&#x27;</span><span class="comment">//改名</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">MyHello</span> <span class="keyword">from</span> <span class="string">&#x27;./hello&#x27;</span><span class="comment">//表示导入的是hello的js文件里面全部导出的变量</span></span><br></pre></td></tr></table></figure>



<h3 id="export-default"><a href="#export-default" class="headerlink" title="export default"></a>export default</h3><p>表示默认导出</p>
<p>只能有一个</p>
<h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vue create vue-demo</span><br><span class="line">选择第三个</span><br><span class="line">选择一三</span><br><span class="line">选择版本3</span><br><span class="line">选择第一个</span><br><span class="line">选择n</span><br></pre></td></tr></table></figure>

<p>assets存放静态资源，公共css文件，图片文件</p>
<p>components存放vue的组件</p>
<p>App.vue主入口的组件，根组件</p>
<h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><p>template：写html</p>
<p>script：写业务逻辑</p>
<h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><p>数据绑定最常见的形式就是使用双大括号语法的插值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;span&gt;Message:&#123;&#123; msg &#125;&#125;&lt;/span&gt;</span><br></pre></td></tr></table></figure>





















































]]></content>
      <tags>
        <tag>html5，css，js</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是数学建模</title>
    <url>/2023/07/16/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/</url>
    <content><![CDATA[<h1 id="数学模型"><a href="#数学模型" class="headerlink" title="数学模型"></a>数学模型</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>对一个现实世界的特定对象，为了某个目的，根据内在规律，作出必要的简化假设，运用数学工具，得到数学结构</p>
<h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><p>自由落体运动，高度和时间的函数关系式<br>$$<br>h&#x3D;\frac{1}{2}gt^2<br>$$</p>
<h2 id="常用的分类标准数学模型"><a href="#常用的分类标准数学模型" class="headerlink" title="常用的分类标准数学模型"></a>常用的分类标准数学模型</h2><h3 id="按变量性质"><a href="#按变量性质" class="headerlink" title="按变量性质"></a>按变量性质</h3><p>确定性模型和随机性模型</p>
<p>连续模型和离散模型</p>
<h3 id="按时间关系"><a href="#按时间关系" class="headerlink" title="按时间关系"></a>按时间关系</h3><p>静态模型和动态模型</p>
<h3 id="按研究工具"><a href="#按研究工具" class="headerlink" title="按研究工具"></a>按研究工具</h3><p>初等模型、几何模型、微分方程模型、运筹学模型、概率模型、统计模型、图论与网络模型、层次分析模型、系统动力学模型、灰色系统模型</p>
<h3 id="按研究对象"><a href="#按研究对象" class="headerlink" title="按研究对象"></a>按研究对象</h3><p>经济模型、生态模型、人口模型、交通模型、战争模型、资源模型、环境模型</p>
<h3 id="按建模目的"><a href="#按建模目的" class="headerlink" title="按建模目的"></a>按建模目的</h3><p>分析模型、预测模型、优化模型、决策模型、控制模型</p>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>逼真性、可行性、渐进性（建模的反复迭代）、强健性（抗干扰能力，适应能力）、转移性、逻辑性</p>
<h1 id="数学建模"><a href="#数学建模" class="headerlink" title="数学建模"></a>数学建模</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><p>应用知识从实际课题中抽象、提炼出数学模型的过程</p>
<h2 id="一般步骤"><a href="#一般步骤" class="headerlink" title="一般步骤"></a>一般步骤</h2><p>对现实问题的调查研究——假设+简化+抽象——简历初步数学模型——对模型检验和评价——改进模型——迭代</p>
<p>ps：</p>
<p>在检验和评价阶段可以采用75%的数据建模，25%的数据评价和检验</p>
<h3 id="调查研究"><a href="#调查研究" class="headerlink" title="调查研究"></a>调查研究</h3><p>需要大量查看参考文献，了解实际问题的历史背景和内在规律，对问题进行全面的、深入的、细致的调查和研究，收集相关的数据</p>
<h3 id="模型假设"><a href="#模型假设" class="headerlink" title="模型假设"></a>模型假设</h3><p>抓住主要因素，暂不考虑或忽略次要因素，对模型大胆假设，理清变量之间的关系，建立相应模型</p>
<h3 id="模型建立"><a href="#模型建立" class="headerlink" title="模型建立"></a>模型建立</h3><p>实体或对象之间的内在关系用数学语言加以描述，建立问题的数学结构，得到数学模型</p>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><h5 id="分清变量类型，恰当使用数学工具"><a href="#分清变量类型，恰当使用数学工具" class="headerlink" title="分清变量类型，恰当使用数学工具"></a>分清变量类型，恰当使用数学工具</h5><p>如果是<strong>确定型变量</strong>，建模多用微积分、微分方程、线性规划、非线性规划、图论与网络、投入产出、插值与拟合</p>
<p>如果是<strong>随机变量</strong>，建模多用概率、统计、随机性存储论、排队论、对策论、决策论、随机微分方程</p>
<h5 id="抓住问题本质，简化变量之间的关系"><a href="#抓住问题本质，简化变量之间的关系" class="headerlink" title="抓住问题本质，简化变量之间的关系"></a>抓住问题本质，简化变量之间的关系</h5><p>建模原则：模型简单明了，思路清晰，侧重于实际应用</p>
<h5 id="建模要有严密推理"><a href="#建模要有严密推理" class="headerlink" title="建模要有严密推理"></a>建模要有严密推理</h5><h5 id="建模要有足够的精确度"><a href="#建模要有足够的精确度" class="headerlink" title="建模要有足够的精确度"></a>建模要有足够的精确度</h5><h3 id="模型求解"><a href="#模型求解" class="headerlink" title="模型求解"></a>模型求解</h3><h3 id="模型检验"><a href="#模型检验" class="headerlink" title="模型检验"></a>模型检验</h3><p><strong>对模型进行分析和检验</strong></p>
<p>分析：误差分析，模型对数据的稳定性分析和灵敏度分析</p>
<p>检验：得到结果的理论值与实际值相比较</p>
<h3 id="模型应用"><a href="#模型应用" class="headerlink" title="模型应用"></a>模型应用</h3><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><blockquote>
<h3 id="中国未来五十年的人口预测"><a href="#中国未来五十年的人口预测" class="headerlink" title="中国未来五十年的人口预测"></a>中国未来五十年的人口预测</h3><p>当今，人类生存面临五大问题：人口问题、工业化的资金问题、粮食问题、资源问题和环境污染问题。其中人口问题为首要问题，主要是人口增长过快，尤其是20世纪70年代到80年代，增加10亿人口只用了12年。有人预计到21世纪中叶，人类将超过100亿。地球上人类可利用的资源是有限的，世界人口的迅速膨胀，尤其是发展中国家过高的人口增长率成为十分严峻的问题。</p>
<p>面临这样的形式问题，我们国家作为发展中国家的必须进行自我控制，即采取必要的措施来抑制过快的人口增长率。而影响人口增长的因素有哪些？其中人口的基数、出生率和死亡率的高低、人口男女比例大小、人口年龄组成情况、工农业生产水平的高低、营养条件、医疗水平、人口素质和环境污染等诸因素都影响人口增长、另外各民族的风俗习惯、传统观念、自然灾难、战争和人口迁移等也与人口增长密切相关。</p>
<p>试建立一个数学模型，对我国人口作出增长预测和控制，为正确的人口政策提供科学的依据。</p>
</blockquote>
<p>思考：首先确定主要因素是人口基数，出生率和死亡率，其他因素作为次要因素，接下来提出假设，假设我国人口基数此时为x，出生率今年为b，死亡率今年为d，由此得出下一年的人口数量为：（1+b-d）x，出生率和死亡率可以参考往年的数值。</p>
<blockquote>
<h2 id="老师的思路"><a href="#老师的思路" class="headerlink" title="老师的思路"></a>老师的思路</h2><p>假设人口增长只与人口的基数和增长率有关，这两个为主要因素。N0表示当年人口基数，r表示年增长率，Nk表示k年后人口数量，建立数学模型<br>$$<br>Nk&#x3D;N0（1+r）^k<br>$$<br>对模型检验需要搜集获得足够的数据。</p>
<p>检验后发现模型不好，采用马尔萨斯模型，之后又发现不够好，于是改进为逻辑斯蒂模型</p>
</blockquote>
]]></content>
      <categories>
        <category>数学建模</category>
      </categories>
      <tags>
        <tag>数学建模</tag>
      </tags>
  </entry>
  <entry>
    <title>一些常用的数学模型</title>
    <url>/2023/07/31/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<p>代码来源：<a href="https://zhuanlan.zhihu.com/p/618061990?utm_id=0">https://zhuanlan.zhihu.com/p/618061990?utm_id=0</a></p>
<h1 id="线性规划"><a href="#线性规划" class="headerlink" title="线性规划"></a>线性规划</h1><p>导入代码模块</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scipy</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"><span class="keyword">import</span> numpy</span><br></pre></td></tr></table></figure>



<h2 id="简单线性规划"><a href="#简单线性规划" class="headerlink" title="简单线性规划"></a>简单线性规划</h2><h3 id="例一（linprog）"><a href="#例一（linprog）" class="headerlink" title="例一（linprog）"></a>例一（linprog）</h3><p><img src="https://pic2.zhimg.com/80/v2-c6f90939bd931458d35d950cea8f2d59_1440w.webp" alt="img"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 简单线性规划</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> linprog</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目标函数</span></span><br><span class="line">f=[-<span class="number">2</span>,-<span class="number">3</span>,<span class="number">5</span>]</span><br><span class="line"><span class="comment"># 小于等于约束</span></span><br><span class="line">aub=[[-<span class="number">2</span>,<span class="number">5</span>,-<span class="number">1</span>],[<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>]]</span><br><span class="line">bub=[-<span class="number">10</span>,<span class="number">12</span>]</span><br><span class="line"><span class="comment"># 等式约束</span></span><br><span class="line">aeq=[[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]]</span><br><span class="line">beq=[<span class="number">7</span>]</span><br><span class="line"><span class="comment"># 非零约束</span></span><br><span class="line">x0bounds=(<span class="number">0</span>,<span class="literal">None</span>)</span><br><span class="line">x1bounds=(<span class="number">0</span>,<span class="literal">None</span>)</span><br><span class="line">x3bounds=(<span class="number">0</span>,<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># 标准型线性规划：最小值、小于等于约束、等输约束、非零约束</span></span><br><span class="line"><span class="comment"># simplex单纯形法；interior-point内点法;highs使用HIPS求解器</span></span><br><span class="line">res = linprog(f, A_ub=aub, b_ub=bub,A_eq=aeq,b_eq=beq ,bounds=[x0bounds, x1bounds,x3bounds], method=<span class="string">&#x27;highs&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure>

<p>运行时结果：</p>
<p><img src="D:\blog\source_posts\数学建模模型.assets\image-20230731183116746.png" alt="image-20230731183116746"></p>
<blockquote>
<p>这段代码是关于数学线性规划的Python代码运行后得出的结果。让我逐步解释一下每一部分的含义：</p>
<ol>
<li><code>con</code>: 这是一个数组，值为 <code>[0.]</code>。通常在线性规划中，这个数组表示约束条件（constraints）。这里只有一个约束条件，即等式约束条件。</li>
<li><code>crossover_nit</code>: 这个值为 <code>0</code>，表示交叉（crossover）的迭代次数。</li>
<li><code>eqlin</code>: 这是一个包含 <code>marginals</code> 和 <code>residual</code> 两个部分的等式约束信息。<code>marginals</code> 表示等式约束条件的边际值，值为 <code>[-2.28571429]</code>。而 <code>residual</code> 表示等式约束条件的残差，值为 <code>[0.]</code>。</li>
<li><code>fun</code>: 这个值为 <code>-14.571428571428573</code>，表示线性规划的目标函数值（objective function value）。目标是最大化或最小化此值。</li>
<li><code>ineqlin</code>: 这是一个包含 <code>marginals</code> 和 <code>residual</code> 两个部分的不等式约束信息。<code>marginals</code> 表示不等式约束条件的边际值，值为 <code>[-0.14285714, -0. ]</code>。而 <code>residual</code> 表示不等式约束条件的残差，值为 <code>[0., 3.85714286]</code>。这里有两个不等式约束条件。</li>
<li><code>lower</code>: 这是一个包含 <code>marginals</code> 和 <code>residual</code> 两个部分的下界信息。<code>marginals</code> 表示变量的下界（lower bound）边际值，但该值由一个内存视图（MemoryView）来表示。而 <code>residual</code> 表示下界条件的残差，值为 <code>[6.42857143, 0.57142857, 0.]</code>。</li>
<li><code>message</code>: 这是一个字符串，值为 <code>&#39;Optimization terminated successfully.&#39;</code>，表示优化过程成功终止。</li>
<li><code>nit</code>: 这个值为 <code>3</code>，表示迭代次数（iterations）。</li>
<li><code>slack</code>: 这是一个数组，值为 <code>[0., 3.85714286]</code>。在线性规划中，这个数组表示松弛变量（slack variables），它们用于衡量不等式约束条件是否被满足。</li>
<li><code>status</code>: 这个值为 <code>0</code>，表示优化的状态。在大多数优化库中，状态为 <code>0</code> 表示成功找到最优解。</li>
<li><code>success</code>: 这个值为 <code>True</code>，表示优化是否成功。</li>
<li><code>upper</code>: 这是一个包含 <code>marginals</code> 和 <code>residual</code> 两个部分的上界信息。<code>marginals</code> 表示变量的上界（upper bound）边际值，但该值由一个内存视图（MemoryView）来表示。而 <code>residual</code> 表示上界条件的残差，值为 <code>[inf, inf, inf]</code>。这里 <code>inf</code> 表示正无穷大，说明部分变量可能没有上界。</li>
<li><code>x</code>: 这是一个数组，值为 <code>[6.42857143, 0.57142857, 0.]</code>。这是线性规划得出的最优解，表示使目标函数达到最大或最小值时的变量取值。</li>
</ol>
<p>综上所述，这段数学线性规划代码的运行结果表明优化成功，得出的最优解为 <code>x = [6.42857143, 0.57142857, 0.]</code>，在这个解下，目标函数的值为 <code>-14.571428571428573</code>。同时，满足了等式约束条件以及不等式约束条件，并且部分变量可能没有上界。</p>
</blockquote>
<h3 id="例二（linprog）"><a href="#例二（linprog）" class="headerlink" title="例二（linprog）"></a>例二（linprog）</h3><p><img src="https://pic2.zhimg.com/80/v2-8b7ba11e726c91025155a9f073fda695_1440w.webp" alt="img"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 简单线性规划</span></span><br><span class="line"><span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> linprog</span><br><span class="line"><span class="comment"># 目标函数</span></span><br><span class="line">f=[-<span class="number">4</span>,-<span class="number">3</span>]</span><br><span class="line"><span class="comment"># 小于等于约束</span></span><br><span class="line">aub=[[<span class="number">2</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">1</span>]]</span><br><span class="line">bub=[<span class="number">10</span>,<span class="number">8</span>,<span class="number">7</span>]</span><br><span class="line"><span class="comment"># 等式约束</span></span><br><span class="line">aeq=<span class="literal">None</span></span><br><span class="line">beq=<span class="literal">None</span></span><br><span class="line"><span class="comment"># 非零约束</span></span><br><span class="line">x0bounds=(<span class="number">0</span>,<span class="literal">None</span>)</span><br><span class="line">x1bounds=(<span class="number">0</span>,<span class="literal">None</span>)</span><br><span class="line">x=[x0bounds, x1bounds]</span><br><span class="line"><span class="comment"># 标准型线性规划：最小值、小于等于约束、等输约束、非零约束</span></span><br><span class="line"><span class="comment"># simplex单纯形法；interior-point内点法;highs使用HIPS求解器</span></span><br><span class="line">res = linprog(f, A_ub=aub, b_ub=bub,A_eq=aeq,b_eq=beq ,bounds=x, method=<span class="string">&#x27;simplex&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure>

<p><img src="D:\blog\source_posts\数学建模模型.assets\image-20230731183904084.png" alt="image-20230731183904084"></p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>其他的方法有：</p>
<ul>
<li><a href="https://blog.csdn.net/m0_54510474/article/details/127849897#minimize_51">minimize()函数</a></li>
<li><a href="https://blog.csdn.net/m0_54510474/article/details/127849897#cvxpy_96">cvxpy库</a></li>
<li><a href="https://blog.csdn.net/m0_54510474/article/details/127849897#cvxopt_130">cvxopt库</a></li>
</ul>
<p>可查看：<a href="https://blog.csdn.net/m0_54510474/article/details/127849897">https://blog.csdn.net/m0_54510474/article/details/127849897</a></p>
<h2 id="简单整数规划"><a href="#简单整数规划" class="headerlink" title="简单整数规划"></a>简单整数规划</h2><p><img src="https://pic3.zhimg.com/80/v2-b68d4e5869618c8b0c3a38088d27de7a_1440w.webp" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 简单整数规划</span><br><span class="line"></span><br><span class="line">import pulp as pp</span><br><span class="line"># 参数设置</span><br><span class="line">c = [3,4,1]        #目标函数未知数前的系数</span><br><span class="line"># 约束1</span><br><span class="line">A_gq = [[1,6,2],[2,0,0]]   # 大于等于式子 未知数前的系数集合 二维数组</span><br><span class="line">b_gq = [5,3]         # 大于等于式子右边的数值 一维数组</span><br><span class="line"># 确定最大最小化问题，当前确定的是最小化问题</span><br><span class="line">m = pp.LpProblem(sense=pp.LpMinimize)</span><br><span class="line"># 定义三个变量放到列表中 生成x1 x2 x3</span><br><span class="line">x = [pp.LpVariable(f&#x27;x&#123;i&#125;&#x27;,lowBound=0,cat=&#x27;Integer&#x27;) for i in [1,2,3]]</span><br><span class="line"># 定义目标函数，并将目标函数加入求解的问题中</span><br><span class="line">m += pp.lpDot(c,x) # lpDot 用于计算点积</span><br><span class="line"># 设置比较条件</span><br><span class="line">for i in range(len(A_gq)):# 大于等于</span><br><span class="line">    m += (pp.lpDot(A_gq[i],x) &gt;= b_gq[i])</span><br><span class="line"># 求解</span><br><span class="line">m.solve()</span><br><span class="line"># 输出结果</span><br><span class="line">print(f&#x27;优化结果：&#123;pp.value(m.objective)&#125;&#x27;)</span><br><span class="line">print(f&#x27;参数取值：&#123;[pp.value(var) for var in x]&#125;&#x27;)</span><br></pre></td></tr></table></figure>

<p>代码运行结果：</p>
<p><img src="D:\blog\source_posts\数学建模模型.assets\image-20230731184740251.png" alt="image-20230731184740251"></p>
]]></content>
      <categories>
        <category>模型</category>
      </categories>
      <tags>
        <tag>数学建模模型</tag>
      </tags>
  </entry>
  <entry>
    <title>一些常用的数学模型</title>
    <url>/2023/07/16/%E6%95%B0%E5%AD%A6%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="人口模型"><a href="#人口模型" class="headerlink" title="人口模型"></a>人口模型</h1><h2 id="马尔萨斯模型"><a href="#马尔萨斯模型" class="headerlink" title="马尔萨斯模型"></a>马尔萨斯模型</h2><h3 id="模型过程"><a href="#模型过程" class="headerlink" title="模型过程"></a>模型过程</h3><p>人口增长与人口基数和增长率有关，这两项为主要因素。假设人口的增长过程可用微分方程来描述。初看起来，人口增长不能用微分方程来描述，因为人口总数是按整数变化的而不是时间的可微函数。然而人口总数很大时，可以近似认为它是时间的连续函数，甚至是可微函数。</p>
<blockquote>
<p>N（t）表示t时刻人口总数</p>
<p>r（t，N（t））表示t时刻的人口增长率，它与时间t和t时刻的人口总数N（t）有关。</p>
</blockquote>
<p>模型建立：</p>
<p>根据假设只考虑人口的基数和增长率，则在t到t+△t这段时间内人口总数增长为<br>$$<br>N（t+△t）-N（t）&#x3D;r（t，N（t））<em>N（t）</em>△t<br>$$<br>两端同除△t，并令△t-&gt;0，则<br>$$<br>\frac{dN（t）}{dt}&#x3D;r[t，N（t）]<em>N（t）<br>$$<br>令r[t，N（t）]&#x3D;r（一个常数）就是马尔萨斯模型（Malthus模型）<br>$$<br>\frac{dN（t）}{dt}&#x3D;r</em>N（t）<br>$$</p>
<p>$$<br>N（t）|（ t&#x3D;t0） &#x3D;N0<br>$$</p>
<p>求解得到<br>$$<br>N（t）&#x3D;N0<em>e^{r</em>(t-t0)}<br>$$</p>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>只符合过去的人口总数而不能用来预测未来人口总数</p>
<p>原因人口总数不太大时，人口总数增长的线性数学模型是正确的，但当人口总数非常大时，地球上的资源，环境等因素对人口增长的限制作用越来越显著</p>
<h2 id="逻辑斯蒂模型"><a href="#逻辑斯蒂模型" class="headerlink" title="逻辑斯蒂模型"></a>逻辑斯蒂模型</h2><p>当人口总数较小时，人口增长率可看作常数，当人口增长到一定数量后，这个增长率就要随人口的增加而减小。该模型考虑到自然资源、环境条件等因素对人口增长起着阻滞作用，并随人口增加，阻滞作用越来越大，该模型又称为阻滞增长模型，它是一种伯努利方程。</p>
<blockquote>
<p>k为生命系数</p>
<p>N为单位时间内两个成员相遇次数的统计平均值</p>
</blockquote>
<p>$$<br>\frac{dN（t）}{dt}&#x3D;r<em>N（t）-K</em>N^2<br>$$</p>
<p>$$<br>N（t）| （t&#x3D;t0） &#x3D;N0<br>$$</p>
<p>可以查到：r&#x3D;0.029，K&#x3D;2.941*10^(-12)</p>
]]></content>
      <categories>
        <category>数学建模</category>
      </categories>
      <tags>
        <tag>数学建模</tag>
      </tags>
  </entry>
  <entry>
    <title>气候变化增加了跨物种病毒传播的风险</title>
    <url>/2023/07/22/%E6%B0%94%E5%80%99%E5%8F%98%E5%8C%96%E5%A2%9E%E5%8A%A0%E4%BA%86%E8%B7%A8%E7%89%A9%E7%A7%8D%E7%97%85%E6%AF%92%E4%BC%A0%E6%92%AD%E7%9A%84%E9%A3%8E%E9%99%A9/</url>
    <content><![CDATA[<p>网页地址：<a href="https://www.nature.com/articles/s41586-022-04788-w">气候变化增加跨物种病毒传播风险 |自然界 (nature.com)</a></p>
<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>至少有10，000种病毒物种具有感染人类的能力</p>
<p>目前绝大多数病毒都在野生哺乳动物中悄无声息地传播</p>
<p>气候和土地利用的变化将导致以前地理上孤立的野生动物物种之间病毒共享的机会</p>
<p>使用哺乳动物病毒网络的系统地理模型模拟未来病毒共享的潜在热点，并预测3年气候变化和土地利用情景下139，2070种哺乳动物物种的地理范围变化</p>
<p>蝙蝠占新型病毒共享的大部分，并且可能沿着进化途径共享病毒</p>
<p>最近几次起源于野生动物的病毒（人畜共患病毒或人畜共患病）的流行病和大流行，大多数预测跨物种传播的框架都集中在使动物病原体能够飞跃到人类宿主的步骤上（这一过程称为溢出）</p>
<p>大多数可归因于气候变化的跨物种传播事件可能会发生在野生动物宿主中，可能威胁到野生动物种群，并且基本上未被人畜共患疾病监测发现</p>
<p>大多数宿主没有机会交换病原体：在所有可能的哺乳动物物种对中，只有大约7%共享任何地理范围，目前已知只有约6%拥有一种或多种相同的病毒物种（以下简称病毒共享）</p>
<p>系统发育是病原体共享和对新病毒入侵的易感性的有力预测指标</p>
<p>随着气候和土地利用变化导致全球动物生物多样性的重新组合，蝙蝠和啮齿动物是否仍将在病毒出现中发挥核心作用尚不得而知</p>
<p><img src="https://media.springernature.com/full/springer-static/esm/art%3A10.1038%2Fs41586-022-04788-w/MediaObjects/41586_2022_4788_Fig6_ESM.jpg?as=webp" alt="扩展数据图1"></p>
<p>边缘宽度表示共享病毒的预期数量（成对物种-物种病毒共享概率的总和），其中大多数共享存在于最具体和密切相关的群体中。网络中显示的边缘是前 25% 的链路。节点的大小按宿主病毒关联数据集中的物种总数按该顺序调整，颜色按程度缩放。</p>
<h1 id="本文重点关注"><a href="#本文重点关注" class="headerlink" title="本文重点关注"></a>本文重点关注</h1><p>通过预测新的合适栖息地（物种可能会或可能不会迁移到）并应用跨物种传播的机制生物学规则，我们预测了全球变化如何以及在何处可能为病毒共享创造新的机会，特别关注这些风险与人类健康之间的潜在联系</p>
<p>专注于哺乳动物</p>
<p>我们为 3870 种胎盘哺乳动物物种建立了物种分布模型 （SDM），并根据气候变化（代表性浓度途径 （RCP））和土地利用（共享社会经济途径 （SSP））的四种配对情景预测地理范围的潜在变化到 2070 年。这些情景描述了全球环境变化的替代未来，从可持续的土地利用变化和将全球变暖保持在2°C以下的高概率（SSP 1-RCP 2.6），到升温超过4°C的高概率，持续的化石燃料依赖以及快速的土地退化和变化（SSP 5-RCP 8.5;<a href="https://www.nature.com/articles/s41586-022-04788-w#Sec8">方法</a>中提供了详细的解释)。</p>
<p>我们使用新合适栖息地的预测来确定未来当前非重叠物种之间可能发生的新范围重叠（以下简称第一次相遇）。然后，我们使用最近开发的病毒共享模型来预测新的病毒共享事件的概率 - 这里定义为至少一个病毒物种的未来跨物种传播，在这种情况下是第一次遇到一对宿主之间的传播 - 基于新的地理重叠和宿主系统发育相似性。</p>
<h1 id="气候变化和土地利用的影响"><a href="#气候变化和土地利用的影响" class="headerlink" title="气候变化和土地利用的影响"></a>气候变化和土地利用的影响</h1><p>如果物种范围的变化能够跟上气候变化的步伐，我们预测绝大多数哺乳动物物种将在其潜在未来范围内的某个地方与至少一个不熟悉的物种重叠</p>
<p>这些哺乳动物物种之间的首次相遇将发生在世界各地，但集中在热带非洲和东南亚</p>
<p><img src="https://media.springernature.com/full/springer-static/esm/art%3A10.1038%2Fs41586-022-04788-w/MediaObjects/41586_2022_4788_Fig9_ESM.jpg" alt="扩展数据图4"></p>
<p>对四种代表性浓度途径（RCP）进行了预测，考虑了气候变化和土地利用变化，没有（左）和有扩散限制（右）。颜色越深对应于像素中更多的第一次相遇。结果是九个全球气候模型的平均值。</p>
<p><a href="https://www.nature.com/articles/s41586-022-04788-w#Fig9">这一</a>结果与物种可能在高纬度聚集的预期背道而驰，因为先前的研究已经预测了气候变化，范围变化和北极寄生虫宿主转换之间的联系</p>
<p>物种沿着纬度梯度移动时，它们与其他已经包含在其组合中的物种以相同的方向行进，导致很少有第一次遇到。相比之下，当物种沿着海拔梯度跟踪热最优值时（允许它们来自不同的方向，即山脉迫使物种聚集），它们将在山脉中以最新的组合聚集，特别是在基线多样性最高的热带地区，与先前的预测相匹配。</p>
<p><a href="https://www.nature.com/articles/s41586-022-04788-w#Fig2">最</a>显著的模型变异发生在亚马逊盆地，以及中非盆地的一小部分、博茨瓦纳和印度次大陆的部分地区些地区基本上没有在最敏感的气候模式和最温暖的路径中首次相遇，大概是因为所有这些都是同质气候的高特有盆地，可能变暖太多，以至于物种逃脱到高海拔避难所（一个相当有据可查的模式）。</p>
<p><strong>气候变化将推动哺乳动物物种之间新的病毒共享</strong></p>
<p><img src="https://media.springernature.com/lw685/springer-static/image/art%3A10.1038%2Fs41586-022-04788-w/MediaObjects/41586_2022_4788_Fig1_HTML.png?as=webp" alt="图1"></p>
<p><strong>蝙蝠不成比例地推动了未来的新型病毒共享</strong></p>
<p><img src="https://media.springernature.com/lw685/springer-static/image/art%3A10.1038%2Fs41586-022-04788-w/MediaObjects/41586_2022_4788_Fig2_HTML.png?as=webp" alt="图2"></p>
<p><strong>a</strong>，<strong>b</strong>， 第一次相遇的空间模式（在SSP 1-RCP 2.6中）在范围变化的哺乳动物对之间有所不同，包括蝙蝠-蝙蝠和蝙蝠-非蝙蝠相遇（<strong>a</strong>）和仅非蝙蝠（<strong>b</strong>）。<strong>c-e</strong>， 使用线性模型，我们表明海拔（<strong>c</strong>），物种丰富度（<strong>d</strong>）和土地利用（<strong>e</strong>）会影响蝙蝠和非蝙蝠在不同情景中的新重叠数量（<a href="https://www.nature.com/articles/s41586-022-04788-w#Sec8">RCP与方法</a>中所述的SSP配对）。<em>n</em> &#x3D; 9 个 GCM 重复。高程效应的坡度通常为正：对数10-转换的海拔增加与 0.4–1.41 对数相关10增加初次相遇。结果是九个大气环流模型的平均值。 CL、气候和土地利用变化;CLD，气候和土地利用变化具有分散限制。e 中的误差线是模型估计值的 <strong>s.e</strong>.。</p>
<p>假设病毒共享最初将局限于新宿主重叠的区域，我们绘制了预期的病毒共享事件，并再次发现大多数共享应该发生在非洲和亚洲的高海拔，物种丰富的生态系统中（图）。<a href="https://www.nature.com/articles/s41586-022-04788-w#Fig1">1a</a>）. 如果物种通过在高海拔避难所聚集而生存在不断变化的气候中生存，这表明新出现的病毒可能是其保护的一个日益严重的问题。</p>
<h1 id="分散推动了蝙蝠的重要性"><a href="#分散推动了蝙蝠的重要性" class="headerlink" title="分散推动了蝙蝠的重要性"></a>分散推动了蝙蝠的重要性</h1><h2 id="蝙蝠特点"><a href="#蝙蝠特点" class="headerlink" title="蝙蝠特点"></a>蝙蝠特点</h2><p>蝙蝠独特的飞行能力</p>
<p>蝙蝠快速移动的能力</p>
<p>即使是非迁徙蝙蝠，一生中也可以定期旅行数百公里，远远超过小型哺乳动物50年所能走过的范围</p>
<p>一半的蝙蝠种群遗传研究未能找到任何通过距离隔离的证据<a href="https://www.nature.com/articles/s41586-022-04788-w#ref-CR35">35</a>.这种独特的传播能力具有不可避免的流行病学意义</p>
<p>世界各地蝙蝠物种正在进行的快速范围扩张</p>
<h2 id="病毒共享的限制"><a href="#病毒共享的限制" class="headerlink" title="病毒共享的限制"></a>病毒共享的限制</h2><p>物种内在的传播能力（限制迁移到新地点的能力</p>
<p>体型、营养等级（这两个决定扩散能力</p>
<p>十大事件的异速生长尺度</p>
<p>温度变暖</p>
<h3 id="发现"><a href="#发现" class="headerlink" title="发现"></a>发现</h3><p>食肉动物的首次遭遇次数略不成比例，而有蹄类动物和啮齿动物的首次遭遇次数略少于随机预期</p>
<p>当增加扩散限制时，空间模式也发生了很大变化，大多数首次接触和跨物种病毒传播事件发生在东南亚</p>
<p>蝙蝠在大陆内的传播不受限制</p>
<p>蝙蝠被排除在先前表征移程哺乳动物扩散能力的研究中<a href="https://www.nature.com/articles/s41586-022-04788-w#ref-CR14">14</a>，遗传证据表明飞行使蝙蝠及其病毒经常在大陆水平上传播<a href="https://www.nature.com/articles/s41586-022-04788-w#ref-CR24">24</a>，<a href="https://www.nature.com/articles/s41586-022-04788-w#ref-CR25">25</a>数据表明，蝙蝠分布已经经历了不成比例的快速变化26，<a href="https://www.nature.com/articles/s41586-022-04788-w#ref-CR27">27</a>，<a href="https://www.nature.com/articles/s41586-022-04788-w#ref-CR28">28</a>，<a href="https://www.nature.com/articles/s41586-022-04788-w#ref-CR26">29</a>，<a href="https://www.nature.com/articles/s41586-022-04788-w#ref-CR30">30</a>，<a href="https://www.nature.com/articles/s41586-022-04788-w#ref-CR31">31</a>，<a href="https://www.nature.com/articles/s41586-022-04788-w#ref-CR32">32</a>，<a href="https://www.nature.com/articles/s41586-022-04788-w#ref-CR33">33</a>，<a href="https://www.nature.com/articles/s41586-022-04788-w#ref-CR34">34</a>.在任何气候情景下，蝙蝠在限制扩散后首次遭遇中占近90%（RCP 2.6：88%±0.1%;RCP 8.5：89%±0.5%），并在空间格局中占主导地位，他们的第一次遭遇大多仅限于东南亚</p>
<p>蝙蝠独特的飞行能力可能是气候驱动的范围变化与哺乳动物病毒组未来变化之间重要且以前未考虑的联系。最近的证据表明，大陆泛混病在人畜共患宿主中可能很常见，使病毒能够以相当的规模传播<a href="https://www.nature.com/articles/s41586-022-04788-w#ref-CR24">24</a>，<a href="https://www.nature.com/articles/s41586-022-04788-w#ref-CR25">25</a>，<a href="https://www.nature.com/articles/s41586-022-04788-w#ref-CR36">36</a>。如果飞行确实使蝙蝠比其他哺乳动物经历更快的范围变化，我们预计它们应该会驱动大多数新的跨物种病毒传播，并可能将人畜共患病毒带入新的区域。然而，蝙蝠快速移动的能力可能会因物种分布的其他生物限制（例如，社会行为和食物供应，目前的方法没有解决）而减弱。这种不确定性为正在进行的关于蝙蝠是否在与其他哺乳动物相比更高的病毒丰富度、更高的人畜共患病毒比例或免疫适应方面的独特性争论增加了一个重要的新维度。<a href="https://www.nature.com/articles/s41586-022-04788-w#ref-CR2">2</a>，<a href="https://www.nature.com/articles/s41586-022-04788-w#ref-CR11">11</a>.</p>
<h1 id="人畜共患疾病的出现与人类健康"><a href="#人畜共患疾病的出现与人类健康" class="headerlink" title="人畜共患疾病的出现与人类健康"></a>人畜共患疾病的出现与人类健康</h1><p>气候变化对哺乳动物病毒共享模式的影响可能会在未来人畜共患病毒的出现中级联</p>
<p>在数以千计的预期病毒共享事件中，一些风险最高的人畜共患病或潜在的人畜共患病可能会找到新的宿主。</p>
<p>跨物种传播的一般规则解释了新兴人畜共患病的溢出模式<a href="https://www.nature.com/articles/s41586-022-04788-w#ref-CR11">11</a>，成功跨越野生动物物种的病毒物种具有最高的人畜共患出现倾向</p>
<p>野生动物到野生动物宿主的跳跃可能是目前在哺乳动物宿主中传播的大约10，000种潜在人畜共患病毒的进化垫脚石</p>
<p>由于气候变化，许多潜在的人畜共患病可能会经历新的进化机会。</p>
<p>预计未来新哺乳动物组合和病毒进化的热点将与人口密度高的地区相吻合，进一步增加对潜在人畜共患病的脆弱性。潜在的第一次遭遇不成比例地可能发生在预计为人类定居或用作农田的地区，而不太可能发生在森林中</p>
<p>我们预测，到2070年，新型病毒共享的热带热点将与高人口密度地区大致重合，特别是在萨赫勒、埃塞俄比亚高原和东非大裂谷、印度、中国东部、印度尼西亚和菲律宾（图）。一些欧洲人口中心也登陆这些热点地区;该地区最近出现的病原体，如乌苏图病毒，突显出尽管有更多的监测和医疗保健，但这些人群仍然很脆弱。如果范围变化的哺乳动物为未被发现的人畜共患病创造了生态释放，那么这些地区的种群都可能很脆弱，一些病毒将能够从这些人口中心中的任何一个在全球范围内传播。</p>
<h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><p>猿猴免疫缺陷病毒使宿主从猴子跳到黑猩猩和大猩猩促进了艾滋病毒的起源</p>
<p>SARS-CoV溢出到果子狸中使蝙蝠病毒能够传播给人类一样</p>
<p>在非洲构建一个由13个扎伊尔埃博拉病毒（ZEBOV）可能宿主组成的子网，并预测了可能涉及这些物种的首次遭遇（图）即使有扩散限制，预计这些第一次相遇也会产生近一百个新的病毒共享事件，可能包括ZEBOV并且覆盖的非洲地区比目前埃博拉的人畜共患生态位要广泛得多<a href="https://www.nature.com/articles/s41586-022-04788-w#ref-CR37">37</a>。这可能会使几种新的野生动物物种暴露于一种致命的病毒中，这种病毒在历史上是造成大量灵长类动物死亡的原因。对于像ZEBOV这样没有已知水库的人畜共患病，未来的宿主跳跃 - 因此，出现覆盖更大地理区域的更大潜在储层池（例如可能将ZEBOV引入东非哺乳动物） - 只会使正在进行的追踪溢出来源和预测未来出现的努力复杂化。</p>
<h1 id="减缓气候变化的影响"><a href="#减缓气候变化的影响" class="headerlink" title="减缓气候变化的影响"></a>减缓气候变化的影响</h1><p>研究结果表明，仅靠通过减少温室气体排放的缓解措施并不能降低气候驱动的病毒共享的可能性。相反，全球变暖可能产生至少同样多甚至更多的跨物种病毒传播：当变暖较慢时，物种可以成功地跟踪气候变化的最优状态，从而产生更大的范围扩大和更多首次相遇的潜力。</p>
<p>总体而言，我们的结果表明，气候系统的轻微扰动可能会为病毒寻找新宿主创造数千种新机会。</p>
<p>变暖将伴随着大规模变暖、毁灭性的疾病出现以及前所未有的人口流离失所和全球不稳定。</p>
<p>我们的研究结果强调了改善野生动物疾病监测系统和公共卫生基础设施作为适应气候变化的一种形式的紧迫性，即使缓解措施取得成功，全球变暖保持在比工业化前水平高+2°C以下</p>
<h1 id="生态机会的时机"><a href="#生态机会的时机" class="headerlink" title="生态机会的时机"></a>生态机会的时机</h1><p>我们研究了气候变化影响的潜在时间。我们预计大多数第一次相遇将发生在二十一世纪后期，因为物种栖息地需要时间转移（特别是在扩散限制的情况下）</p>
<p>用一种全新的气候产品，在最近的过去（1981-2010）设定基线，并检查未来影响的三个时间间隔（2011-2040年，2041-2070年和2071-2100年）。通过预测每个区间平均条件下的物种分布，我们确定了每个区间中唯一第一次相遇的累积次数。值得注意的是，我们发现大多数第一次相遇发生在2011-2040年期间（图）。</p>
<p>物种在整个世纪中不断相遇，我们的模拟表明，物种移动的速度对第一次相遇的时间和规模比合适的栖息地移动或已经移动的速度更重要。此外，第一次相遇的地理位置在所有时间点上保持一致</p>
<p>总体而言，这些研究结果表明，在一个已经超过+1°C全球变暖的世界中，大多数与气候相关的新型病毒共享机会可能已经实现 - 当且仅当物种的传播跟上栖息地适宜性的变化。这个前提——特别是我们对蝙蝠不受扩散限制的模拟——在较小的时间尺度上更加脆弱;迫切需要研究来估计气候引起的范围变化的实时信号。即使存在这些机会，跨物种传播本身的时间仍然不确定和不可预测;我们的病毒共享模型是在平衡的连接水平上训练的，我们预计种间接触和病毒建立之间存在一定程度的滞后。气候变化肯定有可能，甚至有可能已经重塑了哺乳动物病毒组，随着未来半个世纪的持续变暖，我们预测为生态新颖性创造的机会以及由此产生的对病毒组合的影响都将开始饱和。</p>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>我们所做的预测也可能因几个生态因素而变得复杂，包括病毒宿主跳跃的温度敏感性。<a href="https://www.nature.com/articles/s41586-022-04788-w#ref-CR41">41</a>;媒介或非哺乳动物宿主范围变化的潜在独立性;或者，特别是在低海拔地区，脱落可能通过生物多样性稀释和放大效应与疾病流行相互作用，我们的模型没有捕捉到。</p>
<p>鸟类拥有仅次于哺乳动物的记录最好的病毒组，并且占非哺乳动物人畜共患病毒库的大部分</p>
<p>由于全球真菌泛动物动物，两栖动物面临不成比例的高灭绝率，以及雷纳病毒等新出现的威胁引起保护问题，两栖动物之间的病原体交换对于保护从业者来说可能尤为重要</p>
<p>在最近的一项研究暗示北极海冰减少与鳍足类动物和海獭之间的新型病毒传播有关之后</p>
<p>气候变化很容易成为病毒跨物种传播的主要人为力量</p>
<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>我们绘制了陆生哺乳动物的全球地图，描述了它们的栖息地利用和生态位作为气候的函数</p>
<p>我们使用哺乳动物病毒共享网络的模型预测了物种对之间病毒共享的概率，该模型经过系统发育相关性和当前地理范围重叠的训练。通过该模型，我们绘制了不同未来新病毒共享的预测热点。</p>
]]></content>
      <tags>
        <tag>气候变化，病毒传播</tag>
      </tags>
  </entry>
  <entry>
    <title>脉诊笔记-基于分类器集成融合心电图时间和形态信息的心跳分类</title>
    <url>/2023/07/15/%E8%84%89%E8%AF%8A/</url>
    <content><![CDATA[<p>资料：</p>
<p>（英文） <a href="C:\Users\86137\Desktop\脉诊\脉诊论文\1_Heartbeat_Classification_Fusing_Temporal_and_Morphological_Information_of_ECGs_via_Ensemble_of_Classifiers2.pdf">1_Heartbeat_Classification_Fusing_Temporal_and_Morphological_Information_of_ECGs_via_Ensemble_of_Classifiers2.pdf</a> </p>
<p>（中文） <a href="C:\Users\86137\Desktop\脉诊\脉诊论文\1基于分类器集成融合心电图时间和形态信息的心跳分类.pdf">1基于分类器集成融合心电图时间和形态信息的心跳分类.pdf</a> </p>
<h1 id="基本资料"><a href="#基本资料" class="headerlink" title="基本资料"></a>基本资料</h1><h2 id="心律失常"><a href="#心律失常" class="headerlink" title="心律失常"></a>心律失常</h2><p>心率紊乱，通常被称为心律失常，心律失常通常与其他形式的心脏病有关。心电图(ECG)是一种无创和廉价的技术，它们经常被用来检测心律异常，测量一段时间内心脏的电活动。对于心脏电活动的常规分析，通常使用由 12 个独立导联记录的ECG。12导联ECG包括3 条双极肢体 导联 (I、II 和 III)，单极肢体导 联 (AVR、 AVL 和 AVF)和 6 条 单极胸导联，也称为心前导联或 V 导 联 (V1、V2、 V3、 V4、V5 和 V6)。每根导联都是从一 个特定的角度观察全身的心脏电活动。记录中每条导联的持续时间约为 2.5 秒。此外，为了准确地评估心律，一段引线的长时间记录被用来提供 10 秒的节奏条。II 型导联是最常用的节奏条 [3]，因为它通常可以很好地看到最重要的波:P、Q、R、S 和 T。</p>
<p>p 波是心房去极化引起的小缺陷， Q、R 和 S 波通常被认为是一个单一的事件，称为 qrs 复合体，它是 ECG 中振幅最大的部分， 由腹侧去极化 引起。 T 波是 由腹侧再极 化引起的。 最后，在某些情况下，在 T波之后可能会出现一个额外的 U 波。</p>
<p>用于心律失常分类的通用自动系统：</p>
<p>1、对信号进行预处理：基线去除和高频噪声的清洗</p>
<p>2、用心跳分割算法在拍频水平上对信号进行分割（检测qrs复合体</p>
<p>3、提取特征，训练分类器</p>
<p>分类器的集合将组成它的单个分类器的决策组合在一起，改进最终预测。</p>
<p>评估使用支持向量机集合来解决心律失常分类问题的好处，即结合几个支持向量机模型，每个模型都用不同 的特征进行训练。本文使用了基于 R-R 区 间 、小 波 、HOS、 LBP 和 几个幅度值的几个特征描述符并对每个单个特征的适用性进行了评估。 Zhang 等人也使用支持向量机集合进行心律失常自动分类。然而，他们从导联 II 和 V1中提取了特征，并从每个导联的特征中训练了一个分离的模 型。 最后，将两个模型的决策与乘积规则结合起来。</p>
<h2 id="两种范式"><a href="#两种范式" class="headerlink" title="两种范式"></a>两种范式</h2><p> 区分两种流行的评估心律失常分类任务的范式，即患者内和患者间。</p>
<p>患者内范式：可以不受任何限制地使用整个数据库来生成和测试分类模型。该范式在分类器的泛化方面存在一个主要缺点。由于模型可以在训练过程 中学习患者的特殊性，因此在评估步骤中获得的分数可能不是高度可靠的。理想情况下，自动心律失常分类器必须 对任何患者做出准确的诊断，即使系统不包含任何关于该患者的先前信息。因此，需要一种具有高泛化的方法，因为包含所有可能患者记录的训练过的数据库将是不可行的。</p>
<p>患者间范式：他们将MIT-BIH数据库记录分成两组:一组用于训练，另一组用于测试。这些集经过精心设计，避免在两组中包含来自同一患者的任何记录。我们遵循患者间的范式来评估我们的方法。</p>
<h1 id="MIT-BIH-心律失常数据库"><a href="#MIT-BIH-心律失常数据库" class="headerlink" title="MIT-BIH 心律失常数据库"></a><em>MIT-BIH</em> 心律失常数据库</h1><p>MI T-BI H 的心跳类型分为5类：不考虑节奏节拍的记录，发现数据库高度不平衡，因为近90%的节拍属于N 类，而剩下的3%、6%和1%的节拍属于 SVEB、 VEB 和 f 类，并且忽略Q类。</p>
<p><img src="D:\blog\source_posts\脉诊.assets\image-20230717231000382.png" alt="image-20230717231000382"></p>
<h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><h2 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h2><h3 id="基线去除"><a href="#基线去除" class="headerlink" title="基线去除"></a>基线去除</h3><p>使用两个连续的200 ms 和 600 ms 的中值滤波器，从原始信号中减去该基线，得到基线校正后的ECG信号。</p>
<h3 id="（不执行）高频噪声滤波"><a href="#（不执行）高频噪声滤波" class="headerlink" title="（不执行）高频噪声滤波"></a>（不执行）高频噪声滤波</h3><h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>将完整信号分割成拍</p>
<h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><p>使用QRS检测算法</p>
]]></content>
      <categories>
        <category>脉诊</category>
      </categories>
      <tags>
        <tag>脉诊</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2023/08/08/%E9%A1%B9%E7%9B%AE%E6%A0%87%E4%B9%A6/</url>
    <content><![CDATA[<h1 id="报告正文"><a href="#报告正文" class="headerlink" title="报告正文"></a>报告正文</h1><h2 id="（一）立项依据与研究内容"><a href="#（一）立项依据与研究内容" class="headerlink" title="（一）立项依据与研究内容"></a>（一）立项依据与研究内容</h2><h3 id="项目的立项依据"><a href="#项目的立项依据" class="headerlink" title="项目的立项依据"></a>项目的立项依据</h3><h4 id="研究意义"><a href="#研究意义" class="headerlink" title="研究意义"></a>研究意义</h4><h5 id="必要和意义"><a href="#必要和意义" class="headerlink" title="必要和意义"></a>必要和意义</h5><h5 id="创新和价值"><a href="#创新和价值" class="headerlink" title="创新和价值"></a>创新和价值</h5><h4 id="国内外研究现状及发展动态分析"><a href="#国内外研究现状及发展动态分析" class="headerlink" title="国内外研究现状及发展动态分析"></a>国内外研究现状及发展动态分析</h4><h5 id="研究方案"><a href="#研究方案" class="headerlink" title="研究方案"></a>研究方案</h5><h5 id="技术分析"><a href="#技术分析" class="headerlink" title="技术分析"></a>技术分析</h5><h4 id="需结合科学研究发展趋势来论述科学意义"><a href="#需结合科学研究发展趋势来论述科学意义" class="headerlink" title="需结合科学研究发展趋势来论述科学意义"></a>需结合科学研究发展趋势来论述科学意义</h4><h4 id="结合国民经济和社会发展中迫切需要解决的关键科技问题来论述其应用前景"><a href="#结合国民经济和社会发展中迫切需要解决的关键科技问题来论述其应用前景" class="headerlink" title="结合国民经济和社会发展中迫切需要解决的关键科技问题来论述其应用前景"></a>结合国民经济和社会发展中迫切需要解决的关键科技问题来论述其应用前景</h4><h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><h3 id="研究内容"><a href="#研究内容" class="headerlink" title="研究内容"></a>研究内容</h3><h4 id="研究的仪器"><a href="#研究的仪器" class="headerlink" title="研究的仪器"></a>研究的仪器</h4><h4 id="研究目标"><a href="#研究目标" class="headerlink" title="研究目标"></a>研究目标</h4><h4 id="拟解决的关键科学问题及解决方案"><a href="#拟解决的关键科学问题及解决方案" class="headerlink" title="拟解决的关键科学问题及解决方案"></a>拟解决的关键科学问题及解决方案</h4><h5 id="检测问题"><a href="#检测问题" class="headerlink" title="检测问题"></a>检测问题</h5><h5 id="预测和分析问题"><a href="#预测和分析问题" class="headerlink" title="预测和分析问题"></a>预测和分析问题</h5><h1 id="拟采取的研究方案及可行性分析"><a href="#拟采取的研究方案及可行性分析" class="headerlink" title="拟采取的研究方案及可行性分析"></a>拟采取的研究方案及可行性分析</h1><h3 id="研究方法"><a href="#研究方法" class="headerlink" title="研究方法"></a>研究方法</h3><h3 id="技术路线"><a href="#技术路线" class="headerlink" title="技术路线"></a>技术路线</h3><h3 id="实验手段"><a href="#实验手段" class="headerlink" title="实验手段"></a>实验手段</h3><h3 id="关键技术"><a href="#关键技术" class="headerlink" title="关键技术"></a>关键技术</h3><h3 id="研究内容-1"><a href="#研究内容-1" class="headerlink" title="研究内容"></a>研究内容</h3><h4 id="产物介绍"><a href="#产物介绍" class="headerlink" title="产物介绍"></a>产物介绍</h4><h4 id="模型介绍"><a href="#模型介绍" class="headerlink" title="模型介绍"></a>模型介绍</h4><h1 id="本项目的特色与创新之处"><a href="#本项目的特色与创新之处" class="headerlink" title="本项目的特色与创新之处"></a>本项目的特色与创新之处</h1><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><h1 id="年度研究计划及预期研究结果"><a href="#年度研究计划及预期研究结果" class="headerlink" title="年度研究计划及预期研究结果"></a>年度研究计划及预期研究结果</h1><h3 id="拟组织的重要学术交流活动"><a href="#拟组织的重要学术交流活动" class="headerlink" title="拟组织的重要学术交流活动"></a>拟组织的重要学术交流活动</h3><h3 id="国际合作与交流计划"><a href="#国际合作与交流计划" class="headerlink" title="国际合作与交流计划"></a>国际合作与交流计划</h3><h3 id="预期研究成果"><a href="#预期研究成果" class="headerlink" title="预期研究成果"></a>预期研究成果</h3><h2 id="（二）研究基础与工作条件"><a href="#（二）研究基础与工作条件" class="headerlink" title="（二）研究基础与工作条件"></a>（二）研究基础与工作条件</h2><h2 id="研究基础"><a href="#研究基础" class="headerlink" title="研究基础"></a>研究基础</h2><h3 id="与本项目相关的研究工作积累"><a href="#与本项目相关的研究工作积累" class="headerlink" title="与本项目相关的研究工作积累"></a>与本项目相关的研究工作积累</h3><h3 id="已取得的研究工作成绩"><a href="#已取得的研究工作成绩" class="headerlink" title="已取得的研究工作成绩"></a>已取得的研究工作成绩</h3><h2 id="工作条件"><a href="#工作条件" class="headerlink" title="工作条件"></a>工作条件</h2><h3 id="已具备的实验条件"><a href="#已具备的实验条件" class="headerlink" title="已具备的实验条件"></a>已具备的实验条件</h3><h3 id="尚缺少的实验条件和拟解决的途径"><a href="#尚缺少的实验条件和拟解决的途径" class="headerlink" title="尚缺少的实验条件和拟解决的途径"></a>尚缺少的实验条件和拟解决的途径</h3><h3 id="利用国家实验室、国家重点实验室和部门重点实验室等研究基地的计划与落实情况"><a href="#利用国家实验室、国家重点实验室和部门重点实验室等研究基地的计划与落实情况" class="headerlink" title="利用国家实验室、国家重点实验室和部门重点实验室等研究基地的计划与落实情况"></a>利用国家实验室、国家重点实验室和部门重点实验室等研究基地的计划与落实情况</h3><h2 id="正在承担的与本项目相关的科研项目情况"><a href="#正在承担的与本项目相关的科研项目情况" class="headerlink" title="正在承担的与本项目相关的科研项目情况"></a>正在承担的与本项目相关的科研项目情况</h2><h3 id="申请人和主要参与者正在承担的与本项目相关的科研项目情况"><a href="#申请人和主要参与者正在承担的与本项目相关的科研项目情况" class="headerlink" title="申请人和主要参与者正在承担的与本项目相关的科研项目情况"></a>申请人和主要参与者正在承担的与本项目相关的科研项目情况</h3><p>包括国家自然科学基金的项目和国家其他科技计划项目，要注明项目的资助机构、项目类别、批准号、项目名称、获资助金额、起止年月、与本项目的关系及负责的内容等</p>
<h2 id="完成国家自然科学基金项目情况"><a href="#完成国家自然科学基金项目情况" class="headerlink" title="完成国家自然科学基金项目情况"></a>完成国家自然科学基金项目情况</h2><p>对申请人负责的前一个已资助期满的科学基金项目（项目名称及批准号）完成情况、后续研究进展及与本申请项目的关系加以详细说明。另附该项目的研究工作总结摘要（限500字）和相关成果详细目录</p>
<h2 id="（三）其他需要说明的情况"><a href="#（三）其他需要说明的情况" class="headerlink" title="（三）其他需要说明的情况"></a>（三）其他需要说明的情况</h2><p>\1. 申请人同年申请不同类型的国家自然科学基金项目情况（列明同年申请的其他项目的项目类型、项目名称信息，并说明与本项目之间的区别与联系）。</p>
<p>无</p>
<p>\2. 具有高级专业技术职务（职称）的申请人或者主要参与者是否存在同年申请或者参与申请国家自然科学基金项目的单位不一致的情况；如存在上述情况，列明所涉及人员的姓名，申请或参与申请的其他项目的项目类型、项目名称、单位名称、上述人员在该项目中是申请人还是参与者，并说明单位不一致原因。</p>
<p>无</p>
<p>\3. 具有高级专业技术职务（职称）的申请人或者主要参与者是否存在与正在承担的国家自然科学基金项目的单位不一致的情况；如存在上述情况，列明所涉及人员的姓名，正在承担项目的批准号、项目类型、项目名称、单位名称、起止年月，并说明单位不一致原因。</p>
<p>无</p>
<p>\4. 其他。</p>
<p>无</p>
]]></content>
  </entry>
  <entry>
    <title>超过一半的已知人类致病性疾病会因气候变化而加剧</title>
    <url>/2023/07/23/%E8%B6%85%E8%BF%87%E4%B8%80%E5%8D%8A%E7%9A%84%E5%B7%B2%E7%9F%A5%E4%BA%BA%E7%B1%BB%E8%87%B4%E7%97%85%E6%80%A7%E7%96%BE%E7%97%85%E4%BC%9A%E5%9B%A0%E6%B0%94%E5%80%99%E5%8F%98%E5%8C%96%E8%80%8C%E5%8A%A0%E5%89%A7/</url>
    <content><![CDATA[<p>论文地址：<a href="https://www.nature.com/articles/s41558-022-01426-1">超过一半的已知人类致病性疾病会因气候变化而加剧 |自然 气候变化 (nature.com)</a></p>
<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>系统地搜索了关于对温室气体（GHG）排放敏感的十种气候危害对每种已知人类致病性疾病的影响的经验示例</p>
<p>全世界人类面临的传染病中有58%（即218种中的375种）在某些时候因气候灾害而加剧;16%有时会减少。</p>
<p>经验案例揭示了1，006种独特的途径，其中气候灾害通过不同的传播类型导致致病性疾病。</p>
<p>温室气体排放对地球系统的多种气候危害（例如，变暖、热浪、干旱、野火、极端降水、洪水、海平面上升等）具有后果，另一方面，人类致病病（例如细菌、病毒、动物、植物、真菌、原生动物等）和传播类型（例如，媒介传播、空气传播、直接接触等;文本框<a href="https://www.nature.com/articles/s41558-022-01426-1#Sec2">1</a>中的词汇表）的分类学多样性可能受到这些危害的影响。</p>
<h1 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h1><p><img src="https://media.springernature.com/lw685/springer-static/image/art%3A10.1038%2Fs41558-022-01426-1/MediaObjects/41558_2022_1426_Fig1_HTML.png?as=webp" alt="图1"></p>
<p>温室气体调节入射太阳辐射和出射红外辐射之间的平衡</p>
<p>随着空气蓄水能力的增加，变暖加速了土壤水分蒸发，导致通常干燥的地方发生干旱</p>
<p>过度干旱会导致当水蒸发的传热停止时，热浪</p>
<p>干旱和热浪为野火创造了条件</p>
<p>在潮湿的地方，蒸发的快速补充会加强降水</p>
<p>当雨水落在潮湿的地方&#x2F;饱和的土壤上时，容易引起洪水</p>
<p>海洋变暖增强了蒸发和风速，加剧了倾盆大雨和风暴的强度</p>
<p>海平面上升会加剧其潮汐，这反过来又会加剧洪水的影响</p>
<p>一氧化碳的吸收，导致海洋酸化，而海洋环流和变暖的变化会降低海水中的氧气浓度，这些海洋物理化学变化相结合，在本文中被称为海洋气候变化。我们将自然土地覆盖的变化列为危害之一</p>
<h1 id="文献检索"><a href="#文献检索" class="headerlink" title="文献检索"></a>文献检索</h1><p>受气候灾害影响的致病病菌例</p>
<p>两个权威传染病数据库中列出的每种疾病名称</p>
<p>所有疾病列为行，并将每种气候灾害列为列;对疾病和气候灾害的组合使用了疾病和病原体的替代名称进行了搜索。我们在这些不同的搜索中总共检查了 &gt;77，000 个标题。为了纳入，论文需要报告明确的气候危害（例如，热浪、洪水;无花果。<a href="https://www.nature.com/articles/s41558-022-01426-1#Fig1">1</a>）影响明确的致病性疾病（例如疟疾，登革热;补充表<a href="https://www.nature.com/articles/s41558-022-01426-1#MOESM2">1</a>）在隐含的地点和&#x2F;或时间（方法）。共有830篇参考文献载有受气候灾害影响的疾病的案例（补充表<a href="https://www.nature.com/articles/s41558-022-01426-1#MOESM2">2</a>）。</p>
<p><img src="https://media.springernature.com/lw685/springer-static/image/art%3A10.1038%2Fs41558-022-01426-1/MediaObjects/41558_2022_1426_Fig2_HTML.png?as=webp" alt="图2"></p>
<h1 id="气候灾害加重的致病性疾病。"><a href="#气候灾害加重的致病性疾病。" class="headerlink" title="气候灾害加重的致病性疾病。"></a>气候灾害加重的致病性疾病。</h1><p><img src="https://media.springernature.com/lw685/springer-static/image/art%3A10.1038%2Fs41558-022-01426-1/MediaObjects/41558_2022_1426_Fig3_HTML.png?as=webp" alt="图3"></p>
<p>线条的粗细与独特致病性疾病的数量成正比。颜色渐变表示疾病的比例，较深的颜色表示数量较大，颜色较浅表示较少。每个节点的数字表示独特致病性疾病的数量</p>
<p>几个疾病名称被缩写以优化图中空间的使用;其扩展名称见补充表<a href="https://www.nature.com/articles/s41558-022-01426-1#MOESM2">1</a>。</p>
<p>我们发现了3，213个经验案例，都与286种独特的致病病有关（补充表1），其中277种因至少一种气候危害而加重（文本框<a href="https://www.nature.com/articles/s41558-022-01426-1#MOESM2">1</a>中的词汇表）（图）。<a href="https://www.nature.com/articles/s41558-022-01426-1#Fig3">3</a>）. 虽然63种疾病因某些气候灾害而减少（方框<a href="https://www.nature.com/articles/s41558-022-01426-1#Sec2">1</a>中的词汇表），但其中54种疾病有时还因其他气候灾害而加重;只有4种致病性疾病完全因气候灾害而减少（图）</p>
<p>我们发现了006，160种独特的途径，其中气候灾害通过不同的传播类型导致致病性疾病病例（可在 <a href="https://camilo-mora.github.io/Diseases/">https://camilo-mora.github.io/Diseases/</a> 获得疾病的交互式显示）。变暖（122种独特疾病），降水（121种），洪水（81种），干旱（71种），风暴（61种），土地覆盖变化（43种），海洋气候变化（21种），火灾（20种），热浪（10种）和海平面（76种）都被发现会影响由病毒（69），细菌（45），动物（24），真菌（23），原生动物（12），植物（9）和色素（103）引发的疾病。致病性疾病主要通过媒介传播（78种独特疾病），但也发现了涉及水源性（60种）、空气传播（56种）、直接接触（50种）和食源性（3种独特疾病）的传播途径的实例（图）。<a href="https://www.nature.com/articles/s41558-022-01426-1#Fig3">19</a>）. </p>
<p><img src="https://media.springernature.com/lw685/springer-static/image/art%3A10.1038%2Fs41558-022-01426-1/MediaObjects/41558_2022_1426_Fig4_HTML.png" alt="图4"></p>
<p><strong>a</strong>，将致病病区分为因气候灾害而加重和减轻的病原病。<strong>b</strong>，与已知影响人类的所有报告的“传染性”疾病相比，气候灾害加剧的一系列疾病（即GIDEON和CDC对近代历史上已知影响人类的疾病的权威汇编;方法）。</p>
<h1 id="受气候灾害影响的致病病害"><a href="#受气候灾害影响的致病病害" class="headerlink" title="受气候灾害影响的致病病害"></a>受气候灾害影响的致病病害</h1><p>完整的病例列表、传播途径和相关论文可以在 <a href="https://camilo-mora.github.io/Diseases/">https://camilo-mora.github.io/Diseases/</a> 详细探讨。在这个网站上，用户可以浏览一个交互式桑基图，显示气候灾害如何通过给定的传播模式导致致病性疾病，然后单击本文中提到的任何疾病以查看案例，引文和论文副本。</p>
<h2 id="气候灾害使病原体更接近人类"><a href="#气候灾害使病原体更接近人类" class="headerlink" title="气候灾害使病原体更接近人类"></a>气候灾害使病原体更接近人类</h2><p>物种地理范围的变化是气候变化最常见的生态标志之一<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR24">24</a>.变 暖<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR25">25</a>和降水变化<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR25">25</a>，例如，与蚊子等媒介的范围扩展有关<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR25">25</a>蜱<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR26">26</a>跳蚤<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR27">27</a>鸟类<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR28">28</a>和几种哺乳动物<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR29">29</a>与病毒暴发有关<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR25">25</a>细菌<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR25">25</a>动物<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR25">25</a>和原生动物<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR25">25</a>，包括登革热<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR25">25</a>， 基孔肯雅热<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR25">25</a>瘟疫<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR29">29</a>， 莱姆病<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR25">25</a>、西尼罗河病毒<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR28">28</a>， 寨卡<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR25">25</a>锥虫病<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR30">30</a>包虫病<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR31">31</a>和疟疾<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR25">25</a>仅举几例。在水生系统中也观察到气候驱动的扩张，包括弧菌属（例如霍乱）病例<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR32">32</a>）、异尖线虫病<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR33">33</a>和水母的毒液<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR34">34</a>.高纬度地区的变暖使病媒和病原体能够在冬季存活下来，加剧了几种病毒（例如寨卡病毒、登革热）的暴发<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR35">35</a>.变暖、干旱、热浪、野火、风暴、洪水和土地覆盖变化造成的栖息地破坏也与使病原体更接近人类有关。病毒（例如尼帕病毒）的溢出效应<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR36">36</a>和埃博拉<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR37">37</a>），例如，与野生动物有关（例如，蝙蝠<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR38">38</a>啮齿动物<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR39">39</a>和灵长类动物<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR38">38</a>）在更大的地区觅食干旱造成的有限食物资源或在野火后寻找新的栖息地。同样，变暖导致的积雪减少迫使田鼠在人类居住地寻找庇护所，引发汉坦病毒爆发<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR40">40</a>.干旱还导致蚊子和鸟类聚集在剩余的水源周围，促进了西尼罗河病毒的传播<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR41">41</a>.洪水和风暴通常与废水溢出有关，导致诺如病毒的直接和食源性传播<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR16">16</a>、汉坦病毒<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR42">42</a>肝炎<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR43">43</a>和<em>隐孢子虫</em><a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR44">44</a>.变暖还与冰融化和永久冻土融化有关，暴露了曾经冻结的病原体。<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR45">45</a>.例如，对北极圈炭疽爆发的遗传分析表明，这种细菌菌株可能是古老的，并且随着冻土解冻而从出土的动物尸体中出现。<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR46">46</a>.及时冷冻的病原体的成功出现可被视为“潘多拉魔盒”，因为随着时间的推移积累了潜在的大量病原体，以及这些病原体对人们来说可能是新的程度<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR45">45</a>.</p>
<h2 id="气候灾害使人们更接近病原体"><a href="#气候灾害使人们更接近病原体" class="headerlink" title="气候灾害使人们更接近病原体"></a>气候灾害使人们更接近病原体</h2><p>气候灾害还使人们更接近病原体，从而促进了人与病原体之间的接触。例如，热浪通过增加与水有关的娱乐活动，与几种水传播疾病（如<em>弧菌</em>相关感染）的病例增加有关<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR47">47</a>、原发性阿米巴脑膜脑炎<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR48">48</a>和胃肠炎<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR49">49</a>.风暴、洪水和海平面上升导致钩端螺旋体病病例导致人类流离失所<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR50">50</a>、隐孢子虫病<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR51">51</a>， 拉沙热<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR52">52</a>， 贾第虫病<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR53">53</a>胃肠炎<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR54">54</a>， 退伍军人病<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR53">53</a>霍乱<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR55">55</a>沙门氏菌病<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR56">56</a>， 志贺氏菌病<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR56">56</a>肺炎<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR57">57</a>伤寒<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR58">58</a>肝炎<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR58">58</a>、呼吸系统疾病<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR50">50</a>和皮肤病<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR50">50</a>等等。土地利用的变化促进了人类对野生地区的侵占，并创造了新的生态交错带，使人们更接近病媒和病原体<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR59">59</a>，导致埃博拉等多种疾病暴发<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR60">60</a>， 擦洗斑疹伤寒<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR61">61</a>， 昆士兰蜱斑疹伤寒<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR61">61</a>， 莱姆病<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR62">62</a>疟疾<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR63">63</a>等等。干旱和强降水涉及牲畜向适宜地区的迁移，这反过来又导致病原体暴露和疾病暴发（例如炭疽病）。<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR64">64</a>出血热<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR29">29</a>).还注意到降水和温度的变化会影响人类社交聚会和流感等病毒的传播性<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR65">65</a>和新冠肺炎 （COVID-19）<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR66">66</a>.卡波尔等人<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR66">66</a>.表明强降雨可能外源性诱发社会孤立，有助于解释暴雨后COVID-19病例减少的原因;然而，COVID-19病例的增加与印度尼西亚降水的增加有关<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR67">67</a>，也许反映了对极端降雨的不同行为反应。在某些情况下，较高的温度与COVID-19病例的增加有关<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR67">67</a>，尽管没有概述机制，但极端高温可能会迫使人们进入室内，这会增加病毒传播的风险，尤其是在通风不良或减少的情况下;在相关机制中，在凉爽时期冠状病毒传播增加可能与社交聚会增加等因素有关<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR68">68</a>.</p>
<h2 id="气候灾害强化的病原体"><a href="#气候灾害强化的病原体" class="headerlink" title="气候灾害强化的病原体"></a>气候灾害强化的病原体</h2><p>气候危害还加强了病原体的具体方面，包括改善气候对繁殖的适宜性、加速生命周期、增加可能接触的季节&#x2F;长度、加强病原体媒介的相互作用（例如，通过缩短潜伏期）和增加毒力。</p>
<h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>变暖对蚊子种群的发展、存活率、叮咬率和病毒复制产生了积极影响，提高了西尼罗河病毒的传播效率。</p>
<p><a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR69">69</a>.海洋变暖加速了由假藻属引起的有害<em>藻</em>华和疾病的生长</p>
<p><a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR70">70</a>蓝绿色蓝藻<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR70">70</a>和甲藻<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR70">70</a>.海洋变暖和强降水降低了沿海水的盐度，似乎为<em>创伤弧菌</em>提供了肥沃的条件<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR32">32</a>和<em>霍乱弧</em>菌<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR71">71</a>，这是在这种疾病罕见的地区爆发弧菌病的主要解释<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR72">72</a>.</p>
<p>变暖和强降水增加了食物和栖息地资源，导致与鼠疫病例相关的啮齿动物数量激增<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR73">73</a>和汉坦病毒<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR74">74</a>.</p>
<p>暴风雨、暴雨和洪水造成了积水，增加了蚊子及其传播的一系列病原体（例如利什曼病）的繁殖和生长地<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR75">75</a>疟疾<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR75">75</a>， 裂谷热<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR73">73</a>黄热病<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR15">15</a>， 圣路易斯脑炎<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR54">54</a>登革热<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR75">75</a>和西尼罗河热<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR76">76</a>).</p>
<p>气候危害还与病原体引起更严重疾病（即毒力）的能力增加有关。例如，热量与蛋白质的基因表达上调有关，影响弧<em>菌</em>的传递、粘附、穿透、存活和宿主损伤。77，<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR78">78</a> .</p>
<p>热浪也被认为是对“耐热”病毒的自然选择压力，其溢出到人群中会导致毒力增加，因为病毒可以更好地应对人体的主要防御（即发烧）。79，<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR80">80</a> .</p>
<p>干旱造成的粮食短缺与蝙蝠自身免疫防御减少有关，这增加了病毒脱落，有利于亨德拉病毒的爆发81，<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR82">82</a> .</p>
<h2 id="受气候灾害影响的人口"><a href="#受气候灾害影响的人口" class="headerlink" title="受气候灾害影响的人口"></a>受气候灾害影响的人口</h2><p>气候灾害对陆地的广泛影响<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR84">84</a>和海洋<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR85">85</a>食物供应4，<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR86">86</a> ，以及高CO下作物养分浓度降低2<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR87">87</a>，可直接导致人类营养不良，有助于解释食物匮乏人群因疾病暴发而增加的风险</p>
<p>改变身体状况削弱了人类应对病原体的能力</p>
<p>对各种疾病抵抗力下降</p>
<h3 id="气候灾害减少的疾病"><a href="#气候灾害减少的疾病" class="headerlink" title="气候灾害减少的疾病"></a>气候灾害减少的疾病</h3><p>变暖似乎减少了病毒性疾病的传播，这些病毒性疾病可能与不适合病毒的条件有关，或者因为在温暖的条件下免疫系统更强（例如，流感<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR65">65</a>， 非典<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR99">99</a>， 新型冠状病毒肺炎 （COVID-19）<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR100">100</a>、轮状病毒和诺如病毒性肠炎<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR101">101</a>).然而，我们也发现，大多数因至少一种危害而减少的疾病有时会因另一种危害而加重，有时甚至是相同的危害。例如，在某些情况下，洪水减少了血吸虫病感染，限制了蜗牛宿主的栖息地适宜性。<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR102">102</a>.然而，在其他情况下，洪水增加了人类的暴露并扩大了宿主的分散。<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR103">103</a>.干旱还通过减少滋生地降低了疟疾和基孔肯雅热的流行率<a href="https://www.nature.com/articles/s41558-022-01426-1#ref-CR104">104</a>，但在其他国家，干旱导致水池减少的蚊子密度增加74</p>
<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="分析的疾病"><a href="#分析的疾病" class="headerlink" title="分析的疾病"></a>分析的疾病</h2><p>我们将“致病性疾病”广义地定义为由生物体引起的人体任何器官的任何结构或功能紊乱，无论其大小或分类群如何。我们在该术语的广义定义中使用了“病原体”</p>
<h2 id="文献检索-1"><a href="#文献检索-1" class="headerlink" title="文献检索"></a>文献检索</h2><p>我们进行了三种不同的系统搜索，以捕获科学论文中可能使用&#x2F;命名疾病的多种形式（图）。<a href="https://www.nature.com/articles/s41558-022-01426-1#Fig2">2</a>）. </p>
<p>我们从一般搜索开始，将所分析的十种气候灾害中的每一种组合为关键字“疾病”。我们审查了每次检索的前200篇参考文献（即200篇参考文献×10对关键词搜索&#x3D; 2000篇参考文献）。</p>
<p>然后，我们进行了第二次更具体的搜索，将分析的十种气候灾害中的每一种疾病名称中的权威疾病名称列表中的每个疾病名称组合为关键字。疾病名称列表是从GIDEON和CDC获得的，它们共有375个疾病名称。我们评价了每次检索的前20篇参考文献（即375种疾病×10种危害×20篇参考文献&#x3D; 75，000篇参考文献）。</p>
<p>在第三次文献检索中，我们对第一次和第二次检索中未收集数据的病例使用了替代疾病和病原体名称;我们还使用“飓风”和“台风”作为风暴的替代名称。在第三次搜索中，对于我们无法找到病例示例的疾病危害矩阵中的每个单元格，我们使用了GIDEON和CDC数据库中列出的导致疾病的病原体的疾病和物种名称的所有替代名称。实际上，第三次检索确保了数据差距是真实的，与关键词使用的限制无关。对于验证数据差距的第三次检索，我们查看了返回的前200篇参考文献，或者直到找到案例示例，以先发生者为准（补充信息<a href="https://www.nature.com/articles/s41558-022-01426-1#MOESM1">1</a>中的警告）。</p>
<p>所有搜索均在 2020 年 1 月至 2020 年 5 月期间在 Google 学术搜索中进行。检索不按论文发表日期进行过滤;然而，&gt;90%的有案例的论文是在2000年以后发表的（补充表<a href="https://www.nature.com/articles/s41558-022-01426-1#MOESM2">2</a>）。我们在这些不同的搜索中总共检查了 &gt;77，000 个标题。为了纳入，论文必须报告受气候危害影响的疾病的案例。我们对案例的定义是科学论文中的任何摘录，其中声称明确的气候危害在隐含的地点和时间影响明确的疾病。这些标准的目的是确保我们收集到具有可追溯证据的示例。例如，诸如“变暖可能影响疟疾的传播”之类的说法没有包括在内，因为它缺乏事件发生的地点和时间的证据。反过来，诸如“比正常夏季温暖导致肯尼亚疟疾病例增加”之类的说法被包括在内，因为该说法提供了可追溯的证据，表明明确的气候危害（即变暖）影响了特定地点（即肯尼亚）的明确人类疾病（即疟疾）。</p>
<p>我们排除了声称疾病与危害之间存在关系但不包括案例的基于观点的论文。例如，一篇论文声称“疟疾对疟疾的影响很大。降水“不包括在内;虽然可能是真的，但它未能提供证据在何时何地的案例。我们只选择了基于实证的论文（补充信息<a href="https://www.nature.com/articles/s41558-022-01426-1#MOESM1">1</a>中的注意事项）。相关论文的检索仅由11人手动进行一次，包括教授，博士后研究员，研究生和一名本科生。参与者被平等地随机分配要在谷歌学术中使用的关键词列表。取决于搜索（图。<a href="https://www.nature.com/articles/s41558-022-01426-1#Fig2">2</a>），每个用户仔细检查给定数量的返回标题和摘要，并将任何被认为与经验数据相关的参考文献添加到相关参考文献的网络数据库中。相关参考文献数据库是在线维护的，以避免输入重复的参考文献，这些参考文献可能在替代关键字搜索期间出现。共汇编了3 200份相关参考资料。每个相关参考文献的可移植文件格式（PDF）都得到了保护。带有PDF的论文被随机分配给每个参与者，他们负责阅读给定的论文，并在在线数据库中输入任何经验数据和&#x2F;或论文是否缺乏经验数据。一旦阅读了所有PDF文件并收集了经验数据，每个条目都由至少一名替代参与者独立阅读，以确保该条目符合实施的标准（即，每个条目至少由两个人阅读，即输入者和一名其他参与者）。论文主要来自同行评审的期刊和科学书籍;共有830篇参考文献包含受气候灾害影响的疾病的案例（所用参考文献的完整列表见补充表<a href="https://www.nature.com/articles/s41558-022-01426-1#MOESM2">2</a>）。并非所有论文都报告了给定的病原体是如何传播的，但是当提供此类信息时，我们也收集了这些信息。我们遵循了系统综述首选报告项目和荟萃分析方案（PRISMA-P）（补充表<a href="https://www.nature.com/articles/s41558-022-01426-1#MOESM2">3</a>）中建议的系统综述方案清单。</p>
]]></content>
      <tags>
        <tag>气候变化，人类疾病</tag>
      </tags>
  </entry>
</search>
